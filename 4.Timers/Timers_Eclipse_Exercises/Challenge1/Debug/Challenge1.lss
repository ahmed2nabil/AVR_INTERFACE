
Challenge1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000001a0  2**0
                  ALLOC
  2 .stab         000003cc  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006c7  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Timer_init_Normal_Mode>:
/* with clock=1Mhz and prescale F_CPU/256 every count will take 32 us
 * so put initial timer counter=0  0 --> 255 (255 * 32us = 8.16 ms per overflow)
 * so we need timer to overflow 123 times to get a 1 second 
 */
 
void Timer_init_Normal_Mode(void){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0; //timer initial value
  84:	e2 e5       	ldi	r30, 0x52	; 82
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	10 82       	st	Z, r1
	TIMSK = (1<<TOIE0); //enable overflow interrupt
  8a:	e9 e5       	ldi	r30, 0x59	; 89
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	80 83       	st	Z, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0 
	 * 4. clock = F_CPU/256 CS00=0 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<CS02);
  92:	e3 e5       	ldi	r30, 0x53	; 83
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	84 e8       	ldi	r24, 0x84	; 132
  98:	80 83       	st	Z, r24
}
  9a:	cf 91       	pop	r28
  9c:	df 91       	pop	r29
  9e:	08 95       	ret

000000a0 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	8f 93       	push	r24
  ac:	ef 93       	push	r30
  ae:	ff 93       	push	r31
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
	tick++;
  b8:	80 91 60 00 	lds	r24, 0x0060
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	80 93 60 00 	sts	0x0060, r24
	if(tick == NUMBER_OF_OVERFLOWS_PER_SECOND){
  c2:	80 91 60 00 	lds	r24, 0x0060
  c6:	8b 37       	cpi	r24, 0x7B	; 123
  c8:	81 f4       	brne	.+32     	; 0xea <__vector_9+0x4a>
		tick=0;
  ca:	10 92 60 00 	sts	0x0060, r1
		if(PORTC == 9)	PORTC=0;
  ce:	e5 e3       	ldi	r30, 0x35	; 53
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	89 30       	cpi	r24, 0x09	; 9
  d6:	21 f4       	brne	.+8      	; 0xe0 <__vector_9+0x40>
  d8:	e5 e3       	ldi	r30, 0x35	; 53
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	10 82       	st	Z, r1
  de:	05 c0       	rjmp	.+10     	; 0xea <__vector_9+0x4a>
		else PORTC++;
  e0:	e5 e3       	ldi	r30, 0x35	; 53
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 83       	st	Z, r24
	}	
}
  ea:	cf 91       	pop	r28
  ec:	df 91       	pop	r29
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <main>:

int main(void)
{
  fe:	df 93       	push	r29
 100:	cf 93       	push	r28
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
	DDRC  = 0xFF;    // Configure all pins in PORTC as output pins.
 106:	e4 e3       	ldi	r30, 0x34	; 52
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	80 83       	st	Z, r24
	PORTC = 0;       // Initialize the 7-seg display zero at the beginning.
 10e:	e5 e3       	ldi	r30, 0x35	; 53
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	10 82       	st	Z, r1
	SREG |= (1<<7);  // Enable global interrupts in MC.
 114:	af e5       	ldi	r26, 0x5F	; 95
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	ef e5       	ldi	r30, 0x5F	; 95
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	8c 93       	st	X, r24
	Timer_init_Normal_Mode(); //start the timer.
 122:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer_init_Normal_Mode>
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0x28>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
