
mychallenge1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000001a6  2**0
                  ALLOC
  2 .stab         000003d8  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006c7  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 82 00 	call	0x104	; 0x104 <main>
  74:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
#include <avr/io.h>
#include <avr/interrupt.h>

#define NUMBER_OF_OVERFLOWS_PER_SECOND 122
unsigned char g_tick = 0;
ISR (TIMER0_OVF_vect) {
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	ef 93       	push	r30
  8a:	ff 93       	push	r31
  8c:	df 93       	push	r29
  8e:	cf 93       	push	r28
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
g_tick++;
  94:	80 91 60 00 	lds	r24, 0x0060
  98:	8f 5f       	subi	r24, 0xFF	; 255
  9a:	80 93 60 00 	sts	0x0060, r24
if (g_tick== NUMBER_OF_OVERFLOWS_PER_SECOND){
  9e:	80 91 60 00 	lds	r24, 0x0060
  a2:	8a 37       	cpi	r24, 0x7A	; 122
  a4:	81 f4       	brne	.+32     	; 0xc6 <__vector_9+0x4a>
	g_tick=0;
  a6:	10 92 60 00 	sts	0x0060, r1
	if (PORTC==9)
  aa:	e5 e3       	ldi	r30, 0x35	; 53
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	89 30       	cpi	r24, 0x09	; 9
  b2:	21 f4       	brne	.+8      	; 0xbc <__vector_9+0x40>
		PORTC=0;
  b4:	e5 e3       	ldi	r30, 0x35	; 53
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1
  ba:	05 c0       	rjmp	.+10     	; 0xc6 <__vector_9+0x4a>
	else
		PORTC++;
  bc:	e5 e3       	ldi	r30, 0x35	; 53
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	80 83       	st	Z, r24
}
}
  c6:	cf 91       	pop	r28
  c8:	df 91       	pop	r29
  ca:	ff 91       	pop	r31
  cc:	ef 91       	pop	r30
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <timer0_init_normal>:
void timer0_init_normal(void){
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
TCCR0 |= (1<<CS02);
  e2:	a3 e5       	ldi	r26, 0x53	; 83
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	e3 e5       	ldi	r30, 0x53	; 83
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	8c 93       	st	X, r24
TCNT0= 0;
  f0:	e2 e5       	ldi	r30, 0x52	; 82
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	10 82       	st	Z, r1
TIMSK = (1<<FOC0) | (1<<TOIE0);
  f6:	e9 e5       	ldi	r30, 0x59	; 89
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	81 e8       	ldi	r24, 0x81	; 129
  fc:	80 83       	st	Z, r24
}
  fe:	cf 91       	pop	r28
 100:	df 91       	pop	r29
 102:	08 95       	ret

00000104 <main>:
int main (){
 104:	df 93       	push	r29
 106:	cf 93       	push	r28
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0xFF;
 10c:	e4 e3       	ldi	r30, 0x34	; 52
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	80 83       	st	Z, r24
	PORTC = 0x00;
 114:	e5 e3       	ldi	r30, 0x35	; 53
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	10 82       	st	Z, r1
	SREG |= (1<<7);
 11a:	af e5       	ldi	r26, 0x5F	; 95
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	ef e5       	ldi	r30, 0x5F	; 95
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 68       	ori	r24, 0x80	; 128
 126:	8c 93       	st	X, r24
	timer0_init_normal();
 128:	0e 94 6d 00 	call	0xda	; 0xda <timer0_init_normal>
 12c:	ff cf       	rjmp	.-2      	; 0x12c <main+0x28>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
