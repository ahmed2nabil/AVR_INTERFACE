/*
 * hum_det.c
 *
 *  Created on: Apr 25, 2020
 *      Author: 20114
 */


#include"uart.h"

void motors_config(void);
void moveForward(void);
void moveBack(void);
void moveRight(void);
void moveLeft(void);

/* External INT0 Interrupt Service Routine */
ISR(INT0_vect)
{
stop();
}

void INT0_Init(void)
{
	SREG  &= ~(1<<7);                   // Disable interrupts by clearing I-bit
	DDRD  &= (~(1<<PD2));               // Configure INT0/PD2 as input pin
	GICR  |= (1<<INT0);                 // Enable external interrupt pin INT0
	MCUCR |= (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the raising edge
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
}

int main(){
UART_init();
motors_config();
INT0_Init();
uint8 data;
	while(1){
data=UART_recieveByte();


		if(data=='f'){
			moveForward();

		}
		else if(data=='b'){
moveBack();
		}
		else if(data=='l'){
moveLeft();
		}
		else if (data=='r'){
moveRight();
		}
		else {
stop();
		}
	}
return 0;
}

void motors_config(void){
	SET_BIT(DDRC,PC0);
	SET_BIT(DDRC,PC1);
	SET_BIT(DDRC,PC3);
	SET_BIT(DDRC,PC4);

	CLEAR_BIT(PORTC,PC0);
	CLEAR_BIT(PORTC,PC1);
	CLEAR_BIT(PORTC,PC2);
	CLEAR_BIT(PORTC,PC3);
}

void moveForward(void){
	SET_BIT(PORTC,PC0);
	SET_BIT(PORTC,PC3);

	CLEAR_BIT(PORTC,PC1);
	CLEAR_BIT(PORTC,PC4);
}

void moveBack(void){
	SET_BIT(PORTC,PC1);
	SET_BIT(PORTC,PC4);

	CLEAR_BIT(PORTC,PC0);
	CLEAR_BIT(PORTC,PC3);
}

void moveRight(void){
	SET_BIT(PORTC,PC3);
		CLEAR_BIT(PORTC,PC4);

		CLEAR_BIT(PORTC,PC0);
		CLEAR_BIT(PORTC,PC1);
}

void moveLeft(void){
	SET_BIT(PORTC,PC0);
	CLEAR_BIT(PORTC,PC1);

	CLEAR_BIT(PORTC,PC3);
	CLEAR_BIT(PORTC,PC4);
}
void stop(void){
	CLEAR_BIT(PORTC,PC0);
	CLEAR_BIT(PORTC,PC1);
	CLEAR_BIT(PORTC,PC2);
	CLEAR_BIT(PORTC,PC3);
}
