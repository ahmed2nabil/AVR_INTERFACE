
ramdan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c48  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001c48  00001cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000d20  00000000  00000000  00001dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b57  00000000  00000000  00002ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000363b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  000037db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  000039cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  00005dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  0000714e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00008328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  000084e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  000087db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000091a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 02 	jmp	0x454	; 0x454 <__ctors_end>
       4:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
       8:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
       c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      10:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      14:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      18:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      1c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      20:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      24:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      28:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      2c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      30:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      34:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      38:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      3c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      40:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      44:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      48:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      4c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>
      50:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__bad_interrupt>

00000054 <img>:
	...
      6c:	00 80 c0 e0 e0 f0 f8 fc fc fe f8 c0 80 80 00 00     ................
	...
      88:	00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
      98:	00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00     ................
      a8:	00 00 00 00 00 00 00 80 80 c0 f8 fe fc fc f8 f0     ................
      b8:	e0 e0 c0 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
      e4:	00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff ff ff ff     ................
      f4:	ff ff ff ff ff ff ff 7f 3f 1e 1e 1e 1c 1c 1c 18     ........?.......
     104:	18 18 18 18 08 08 08 0f 0f 0e 0e 0e 0e 0e 0e 0e     ................
     114:	0e 0e 0e 0e 1e 1e 1e 1e 1f 1f 18 18 18 18 98 98     ................
     124:	98 98 9c 9c 9c 1e 1e 1e 3f 7f ff ff ff ff ff ff     ........?.......
     134:	ff ff ff ff ff ff ff ff ff fe fc f8 f0 e0 c0 80     ................
	...
     160:	80 e0 f0 fc fe ff ff ff ff ff ff ff ff ff ff ff     ................
     170:	ff ff ff 7f 3f 1f 0f 87 e3 f1 38 1c 06 03 01 00     ....?.....8.....
     180:	00 00 00 00 00 00 3c 7c 7e fe fe ff ff ff ff ff     ......<|~.......
     190:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1a0:	fe fe fe fc fc fd f9 fb f3 e3 e3 c0 c0 80 08 31     ...............1
     1b0:	e3 87 0f 1f 3f 7f ff ff ff ff ff ff ff ff ff ff     ....?...........
     1c0:	ff ff ff ff fe fc f0 e0 80 00 00 00 00 00 00 00     ................
	...
     1dc:	c0 f0 fc fe ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1ec:	ff ff ff ff cf 03 01 30 fc fe ff 3f 03 00 00 00     .......0...?....
	...
     214:	00 00 01 01 01 01 01 01 01 01 01 01 01 03 03 03     ................
     224:	03 07 07 07 0f 1f 1f 3f 7f ff ff fe fc f9 e7 ce     .......?........
     234:	18 30 01 83 cf ff ff ff ff ff ff ff ff ff ff ff     .0..............
     244:	ff ff ff ff ff fe fc f0 c0 00 00 00 00 00 00 00     ................
     254:	00 00 00 00 80 f0 fc ff ff ff ff ff ff ff ff ff     ................
     264:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe fc     ................
     274:	f8 f1 e3 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     2ac:	00 00 01 03 0f c7 e1 f0 f8 fc fe ff ff ff ff ff     ................
     2bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2cc:	ff ff fc f0 80 00 00 00 00 00 c0 fc ff ff ff ff     ................
     2dc:	ff ff ff ff ff ff ff 7f 7f 7f 7f 3f 3f 7f ff ff     ...........??...
     2ec:	ff 7f 3f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 1e 1c 38     ..?............8
     2fc:	70 60 c2 c6 8c 1c 3c 7c f8 f8 f8 f8 f8 f0 f0 f0     p`....<|........
     30c:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
     31c:	e0 e0 c0 c0 80 00 00 00 00 00 00 00 80 c0 c0 60     ...............`
     32c:	70 38 1c 1e 0f 0f 0f 0f 1f 1f 1f 1f 1f 1f 3f 7f     p8............?.
     33c:	ff ff ff 7f 3f 3f 7f 7f 7f 7f ff ff ff ff ff ff     ....??..........
     34c:	ff ff ff ff ff fc c0 00 00 fc 7f 3f 0f 07 07 03     ...........?....
     35c:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     36c:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     37c:	00 00 00 01 03 03 06 0c 18 10 21 43 03 83 07 07     ..........!C....
     38c:	0f 8f 8f 8f 8f 9f 9f 9f 9f 9f 8f 8f 8f 8f 8f 0f     ................
     39c:	07 07 03 83 01 40 20 10 18 0c 06 03 03 01 00 00     .....@ .........
	...
     3bc:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
     3cc:	01 03 07 07 0f 3f 7f fc 00 01 00 00 00 00 00 00     .....?..........
	...
     408:	00 00 01 02 00 00 01 01 03 07 0f 1f 1f 1f 0f 07     ................
     418:	03 01 00 00 00 02 01 00 00 00 00 00 00 00 00 00     ................
	...
     450:	00 00 00 01                                         ....

00000454 <__ctors_end>:
     454:	11 24       	eor	r1, r1
     456:	1f be       	out	0x3f, r1	; 63
     458:	cf e5       	ldi	r28, 0x5F	; 95
     45a:	d4 e0       	ldi	r29, 0x04	; 4
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	cd bf       	out	0x3d, r28	; 61

00000460 <__do_copy_data>:
     460:	11 e0       	ldi	r17, 0x01	; 1
     462:	a0 e6       	ldi	r26, 0x60	; 96
     464:	b0 e0       	ldi	r27, 0x00	; 0
     466:	e8 e4       	ldi	r30, 0x48	; 72
     468:	fc e1       	ldi	r31, 0x1C	; 28
     46a:	02 c0       	rjmp	.+4      	; 0x470 <.do_copy_data_start>

0000046c <.do_copy_data_loop>:
     46c:	05 90       	lpm	r0, Z+
     46e:	0d 92       	st	X+, r0

00000470 <.do_copy_data_start>:
     470:	a8 36       	cpi	r26, 0x68	; 104
     472:	b1 07       	cpc	r27, r17
     474:	d9 f7       	brne	.-10     	; 0x46c <.do_copy_data_loop>
     476:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <main>
     47a:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <_exit>

0000047e <__bad_interrupt>:
     47e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000482 <__fixunssfsi>:
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	7b 01       	movw	r14, r22
     48c:	8c 01       	movw	r16, r24
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	5f e4       	ldi	r21, 0x4F	; 79
     496:	0e 94 ed 05 	call	0xbda	; 0xbda <__gesf2>
     49a:	88 23       	and	r24, r24
     49c:	8c f0       	brlt	.+34     	; 0x4c0 <__fixunssfsi+0x3e>
     49e:	c8 01       	movw	r24, r16
     4a0:	b7 01       	movw	r22, r14
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	5f e4       	ldi	r21, 0x4F	; 79
     4aa:	0e 94 b9 03 	call	0x772	; 0x772 <__subsf3>
     4ae:	0e 94 ab 06 	call	0xd56	; 0xd56 <__fixsfsi>
     4b2:	9b 01       	movw	r18, r22
     4b4:	ac 01       	movw	r20, r24
     4b6:	20 50       	subi	r18, 0x00	; 0
     4b8:	30 40       	sbci	r19, 0x00	; 0
     4ba:	40 40       	sbci	r20, 0x00	; 0
     4bc:	50 48       	sbci	r21, 0x80	; 128
     4be:	06 c0       	rjmp	.+12     	; 0x4cc <__fixunssfsi+0x4a>
     4c0:	c8 01       	movw	r24, r16
     4c2:	b7 01       	movw	r22, r14
     4c4:	0e 94 ab 06 	call	0xd56	; 0xd56 <__fixsfsi>
     4c8:	9b 01       	movw	r18, r22
     4ca:	ac 01       	movw	r20, r24
     4cc:	b9 01       	movw	r22, r18
     4ce:	ca 01       	movw	r24, r20
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	08 95       	ret

000004da <_fpadd_parts>:
     4da:	a0 e0       	ldi	r26, 0x00	; 0
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	e3 e7       	ldi	r30, 0x73	; 115
     4e0:	f2 e0       	ldi	r31, 0x02	; 2
     4e2:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__prologue_saves__>
     4e6:	dc 01       	movw	r26, r24
     4e8:	2b 01       	movw	r4, r22
     4ea:	fa 01       	movw	r30, r20
     4ec:	9c 91       	ld	r25, X
     4ee:	92 30       	cpi	r25, 0x02	; 2
     4f0:	08 f4       	brcc	.+2      	; 0x4f4 <_fpadd_parts+0x1a>
     4f2:	39 c1       	rjmp	.+626    	; 0x766 <_fpadd_parts+0x28c>
     4f4:	eb 01       	movw	r28, r22
     4f6:	88 81       	ld	r24, Y
     4f8:	82 30       	cpi	r24, 0x02	; 2
     4fa:	08 f4       	brcc	.+2      	; 0x4fe <_fpadd_parts+0x24>
     4fc:	33 c1       	rjmp	.+614    	; 0x764 <_fpadd_parts+0x28a>
     4fe:	94 30       	cpi	r25, 0x04	; 4
     500:	69 f4       	brne	.+26     	; 0x51c <_fpadd_parts+0x42>
     502:	84 30       	cpi	r24, 0x04	; 4
     504:	09 f0       	breq	.+2      	; 0x508 <_fpadd_parts+0x2e>
     506:	2f c1       	rjmp	.+606    	; 0x766 <_fpadd_parts+0x28c>
     508:	11 96       	adiw	r26, 0x01	; 1
     50a:	9c 91       	ld	r25, X
     50c:	11 97       	sbiw	r26, 0x01	; 1
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	98 17       	cp	r25, r24
     512:	09 f4       	brne	.+2      	; 0x516 <_fpadd_parts+0x3c>
     514:	28 c1       	rjmp	.+592    	; 0x766 <_fpadd_parts+0x28c>
     516:	a0 e6       	ldi	r26, 0x60	; 96
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	25 c1       	rjmp	.+586    	; 0x766 <_fpadd_parts+0x28c>
     51c:	84 30       	cpi	r24, 0x04	; 4
     51e:	09 f4       	brne	.+2      	; 0x522 <_fpadd_parts+0x48>
     520:	21 c1       	rjmp	.+578    	; 0x764 <_fpadd_parts+0x28a>
     522:	82 30       	cpi	r24, 0x02	; 2
     524:	a9 f4       	brne	.+42     	; 0x550 <_fpadd_parts+0x76>
     526:	92 30       	cpi	r25, 0x02	; 2
     528:	09 f0       	breq	.+2      	; 0x52c <_fpadd_parts+0x52>
     52a:	1d c1       	rjmp	.+570    	; 0x766 <_fpadd_parts+0x28c>
     52c:	9a 01       	movw	r18, r20
     52e:	ad 01       	movw	r20, r26
     530:	88 e0       	ldi	r24, 0x08	; 8
     532:	ea 01       	movw	r28, r20
     534:	09 90       	ld	r0, Y+
     536:	ae 01       	movw	r20, r28
     538:	e9 01       	movw	r28, r18
     53a:	09 92       	st	Y+, r0
     53c:	9e 01       	movw	r18, r28
     53e:	81 50       	subi	r24, 0x01	; 1
     540:	c1 f7       	brne	.-16     	; 0x532 <_fpadd_parts+0x58>
     542:	e2 01       	movw	r28, r4
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	11 96       	adiw	r26, 0x01	; 1
     548:	9c 91       	ld	r25, X
     54a:	89 23       	and	r24, r25
     54c:	81 83       	std	Z+1, r24	; 0x01
     54e:	08 c1       	rjmp	.+528    	; 0x760 <_fpadd_parts+0x286>
     550:	92 30       	cpi	r25, 0x02	; 2
     552:	09 f4       	brne	.+2      	; 0x556 <_fpadd_parts+0x7c>
     554:	07 c1       	rjmp	.+526    	; 0x764 <_fpadd_parts+0x28a>
     556:	12 96       	adiw	r26, 0x02	; 2
     558:	2d 90       	ld	r2, X+
     55a:	3c 90       	ld	r3, X
     55c:	13 97       	sbiw	r26, 0x03	; 3
     55e:	eb 01       	movw	r28, r22
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	9b 81       	ldd	r25, Y+3	; 0x03
     564:	14 96       	adiw	r26, 0x04	; 4
     566:	ad 90       	ld	r10, X+
     568:	bd 90       	ld	r11, X+
     56a:	cd 90       	ld	r12, X+
     56c:	dc 90       	ld	r13, X
     56e:	17 97       	sbiw	r26, 0x07	; 7
     570:	ec 80       	ldd	r14, Y+4	; 0x04
     572:	fd 80       	ldd	r15, Y+5	; 0x05
     574:	0e 81       	ldd	r16, Y+6	; 0x06
     576:	1f 81       	ldd	r17, Y+7	; 0x07
     578:	91 01       	movw	r18, r2
     57a:	28 1b       	sub	r18, r24
     57c:	39 0b       	sbc	r19, r25
     57e:	b9 01       	movw	r22, r18
     580:	37 ff       	sbrs	r19, 7
     582:	04 c0       	rjmp	.+8      	; 0x58c <_fpadd_parts+0xb2>
     584:	66 27       	eor	r22, r22
     586:	77 27       	eor	r23, r23
     588:	62 1b       	sub	r22, r18
     58a:	73 0b       	sbc	r23, r19
     58c:	60 32       	cpi	r22, 0x20	; 32
     58e:	71 05       	cpc	r23, r1
     590:	0c f0       	brlt	.+2      	; 0x594 <_fpadd_parts+0xba>
     592:	61 c0       	rjmp	.+194    	; 0x656 <_fpadd_parts+0x17c>
     594:	12 16       	cp	r1, r18
     596:	13 06       	cpc	r1, r19
     598:	6c f5       	brge	.+90     	; 0x5f4 <_fpadd_parts+0x11a>
     59a:	37 01       	movw	r6, r14
     59c:	48 01       	movw	r8, r16
     59e:	06 2e       	mov	r0, r22
     5a0:	04 c0       	rjmp	.+8      	; 0x5aa <_fpadd_parts+0xd0>
     5a2:	96 94       	lsr	r9
     5a4:	87 94       	ror	r8
     5a6:	77 94       	ror	r7
     5a8:	67 94       	ror	r6
     5aa:	0a 94       	dec	r0
     5ac:	d2 f7       	brpl	.-12     	; 0x5a2 <_fpadd_parts+0xc8>
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <_fpadd_parts+0xe6>
     5b8:	22 0f       	add	r18, r18
     5ba:	33 1f       	adc	r19, r19
     5bc:	44 1f       	adc	r20, r20
     5be:	55 1f       	adc	r21, r21
     5c0:	6a 95       	dec	r22
     5c2:	d2 f7       	brpl	.-12     	; 0x5b8 <_fpadd_parts+0xde>
     5c4:	21 50       	subi	r18, 0x01	; 1
     5c6:	30 40       	sbci	r19, 0x00	; 0
     5c8:	40 40       	sbci	r20, 0x00	; 0
     5ca:	50 40       	sbci	r21, 0x00	; 0
     5cc:	2e 21       	and	r18, r14
     5ce:	3f 21       	and	r19, r15
     5d0:	40 23       	and	r20, r16
     5d2:	51 23       	and	r21, r17
     5d4:	21 15       	cp	r18, r1
     5d6:	31 05       	cpc	r19, r1
     5d8:	41 05       	cpc	r20, r1
     5da:	51 05       	cpc	r21, r1
     5dc:	21 f0       	breq	.+8      	; 0x5e6 <_fpadd_parts+0x10c>
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	79 01       	movw	r14, r18
     5e8:	8a 01       	movw	r16, r20
     5ea:	e6 28       	or	r14, r6
     5ec:	f7 28       	or	r15, r7
     5ee:	08 29       	or	r16, r8
     5f0:	19 29       	or	r17, r9
     5f2:	3c c0       	rjmp	.+120    	; 0x66c <_fpadd_parts+0x192>
     5f4:	23 2b       	or	r18, r19
     5f6:	d1 f1       	breq	.+116    	; 0x66c <_fpadd_parts+0x192>
     5f8:	26 0e       	add	r2, r22
     5fa:	37 1e       	adc	r3, r23
     5fc:	35 01       	movw	r6, r10
     5fe:	46 01       	movw	r8, r12
     600:	06 2e       	mov	r0, r22
     602:	04 c0       	rjmp	.+8      	; 0x60c <_fpadd_parts+0x132>
     604:	96 94       	lsr	r9
     606:	87 94       	ror	r8
     608:	77 94       	ror	r7
     60a:	67 94       	ror	r6
     60c:	0a 94       	dec	r0
     60e:	d2 f7       	brpl	.-12     	; 0x604 <_fpadd_parts+0x12a>
     610:	21 e0       	ldi	r18, 0x01	; 1
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	04 c0       	rjmp	.+8      	; 0x622 <_fpadd_parts+0x148>
     61a:	22 0f       	add	r18, r18
     61c:	33 1f       	adc	r19, r19
     61e:	44 1f       	adc	r20, r20
     620:	55 1f       	adc	r21, r21
     622:	6a 95       	dec	r22
     624:	d2 f7       	brpl	.-12     	; 0x61a <_fpadd_parts+0x140>
     626:	21 50       	subi	r18, 0x01	; 1
     628:	30 40       	sbci	r19, 0x00	; 0
     62a:	40 40       	sbci	r20, 0x00	; 0
     62c:	50 40       	sbci	r21, 0x00	; 0
     62e:	2a 21       	and	r18, r10
     630:	3b 21       	and	r19, r11
     632:	4c 21       	and	r20, r12
     634:	5d 21       	and	r21, r13
     636:	21 15       	cp	r18, r1
     638:	31 05       	cpc	r19, r1
     63a:	41 05       	cpc	r20, r1
     63c:	51 05       	cpc	r21, r1
     63e:	21 f0       	breq	.+8      	; 0x648 <_fpadd_parts+0x16e>
     640:	21 e0       	ldi	r18, 0x01	; 1
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	59 01       	movw	r10, r18
     64a:	6a 01       	movw	r12, r20
     64c:	a6 28       	or	r10, r6
     64e:	b7 28       	or	r11, r7
     650:	c8 28       	or	r12, r8
     652:	d9 28       	or	r13, r9
     654:	0b c0       	rjmp	.+22     	; 0x66c <_fpadd_parts+0x192>
     656:	82 15       	cp	r24, r2
     658:	93 05       	cpc	r25, r3
     65a:	2c f0       	brlt	.+10     	; 0x666 <_fpadd_parts+0x18c>
     65c:	1c 01       	movw	r2, r24
     65e:	aa 24       	eor	r10, r10
     660:	bb 24       	eor	r11, r11
     662:	65 01       	movw	r12, r10
     664:	03 c0       	rjmp	.+6      	; 0x66c <_fpadd_parts+0x192>
     666:	ee 24       	eor	r14, r14
     668:	ff 24       	eor	r15, r15
     66a:	87 01       	movw	r16, r14
     66c:	11 96       	adiw	r26, 0x01	; 1
     66e:	9c 91       	ld	r25, X
     670:	d2 01       	movw	r26, r4
     672:	11 96       	adiw	r26, 0x01	; 1
     674:	8c 91       	ld	r24, X
     676:	98 17       	cp	r25, r24
     678:	09 f4       	brne	.+2      	; 0x67c <_fpadd_parts+0x1a2>
     67a:	45 c0       	rjmp	.+138    	; 0x706 <_fpadd_parts+0x22c>
     67c:	99 23       	and	r25, r25
     67e:	39 f0       	breq	.+14     	; 0x68e <_fpadd_parts+0x1b4>
     680:	a8 01       	movw	r20, r16
     682:	97 01       	movw	r18, r14
     684:	2a 19       	sub	r18, r10
     686:	3b 09       	sbc	r19, r11
     688:	4c 09       	sbc	r20, r12
     68a:	5d 09       	sbc	r21, r13
     68c:	06 c0       	rjmp	.+12     	; 0x69a <_fpadd_parts+0x1c0>
     68e:	a6 01       	movw	r20, r12
     690:	95 01       	movw	r18, r10
     692:	2e 19       	sub	r18, r14
     694:	3f 09       	sbc	r19, r15
     696:	40 0b       	sbc	r20, r16
     698:	51 0b       	sbc	r21, r17
     69a:	57 fd       	sbrc	r21, 7
     69c:	08 c0       	rjmp	.+16     	; 0x6ae <_fpadd_parts+0x1d4>
     69e:	11 82       	std	Z+1, r1	; 0x01
     6a0:	33 82       	std	Z+3, r3	; 0x03
     6a2:	22 82       	std	Z+2, r2	; 0x02
     6a4:	24 83       	std	Z+4, r18	; 0x04
     6a6:	35 83       	std	Z+5, r19	; 0x05
     6a8:	46 83       	std	Z+6, r20	; 0x06
     6aa:	57 83       	std	Z+7, r21	; 0x07
     6ac:	1d c0       	rjmp	.+58     	; 0x6e8 <_fpadd_parts+0x20e>
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	81 83       	std	Z+1, r24	; 0x01
     6b2:	33 82       	std	Z+3, r3	; 0x03
     6b4:	22 82       	std	Z+2, r2	; 0x02
     6b6:	88 27       	eor	r24, r24
     6b8:	99 27       	eor	r25, r25
     6ba:	dc 01       	movw	r26, r24
     6bc:	82 1b       	sub	r24, r18
     6be:	93 0b       	sbc	r25, r19
     6c0:	a4 0b       	sbc	r26, r20
     6c2:	b5 0b       	sbc	r27, r21
     6c4:	84 83       	std	Z+4, r24	; 0x04
     6c6:	95 83       	std	Z+5, r25	; 0x05
     6c8:	a6 83       	std	Z+6, r26	; 0x06
     6ca:	b7 83       	std	Z+7, r27	; 0x07
     6cc:	0d c0       	rjmp	.+26     	; 0x6e8 <_fpadd_parts+0x20e>
     6ce:	22 0f       	add	r18, r18
     6d0:	33 1f       	adc	r19, r19
     6d2:	44 1f       	adc	r20, r20
     6d4:	55 1f       	adc	r21, r21
     6d6:	24 83       	std	Z+4, r18	; 0x04
     6d8:	35 83       	std	Z+5, r19	; 0x05
     6da:	46 83       	std	Z+6, r20	; 0x06
     6dc:	57 83       	std	Z+7, r21	; 0x07
     6de:	82 81       	ldd	r24, Z+2	; 0x02
     6e0:	93 81       	ldd	r25, Z+3	; 0x03
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	93 83       	std	Z+3, r25	; 0x03
     6e6:	82 83       	std	Z+2, r24	; 0x02
     6e8:	24 81       	ldd	r18, Z+4	; 0x04
     6ea:	35 81       	ldd	r19, Z+5	; 0x05
     6ec:	46 81       	ldd	r20, Z+6	; 0x06
     6ee:	57 81       	ldd	r21, Z+7	; 0x07
     6f0:	da 01       	movw	r26, r20
     6f2:	c9 01       	movw	r24, r18
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	a1 09       	sbc	r26, r1
     6f8:	b1 09       	sbc	r27, r1
     6fa:	8f 5f       	subi	r24, 0xFF	; 255
     6fc:	9f 4f       	sbci	r25, 0xFF	; 255
     6fe:	af 4f       	sbci	r26, 0xFF	; 255
     700:	bf 43       	sbci	r27, 0x3F	; 63
     702:	28 f3       	brcs	.-54     	; 0x6ce <_fpadd_parts+0x1f4>
     704:	0b c0       	rjmp	.+22     	; 0x71c <_fpadd_parts+0x242>
     706:	91 83       	std	Z+1, r25	; 0x01
     708:	33 82       	std	Z+3, r3	; 0x03
     70a:	22 82       	std	Z+2, r2	; 0x02
     70c:	ea 0c       	add	r14, r10
     70e:	fb 1c       	adc	r15, r11
     710:	0c 1d       	adc	r16, r12
     712:	1d 1d       	adc	r17, r13
     714:	e4 82       	std	Z+4, r14	; 0x04
     716:	f5 82       	std	Z+5, r15	; 0x05
     718:	06 83       	std	Z+6, r16	; 0x06
     71a:	17 83       	std	Z+7, r17	; 0x07
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	80 83       	st	Z, r24
     720:	24 81       	ldd	r18, Z+4	; 0x04
     722:	35 81       	ldd	r19, Z+5	; 0x05
     724:	46 81       	ldd	r20, Z+6	; 0x06
     726:	57 81       	ldd	r21, Z+7	; 0x07
     728:	57 ff       	sbrs	r21, 7
     72a:	1a c0       	rjmp	.+52     	; 0x760 <_fpadd_parts+0x286>
     72c:	c9 01       	movw	r24, r18
     72e:	aa 27       	eor	r26, r26
     730:	97 fd       	sbrc	r25, 7
     732:	a0 95       	com	r26
     734:	ba 2f       	mov	r27, r26
     736:	81 70       	andi	r24, 0x01	; 1
     738:	90 70       	andi	r25, 0x00	; 0
     73a:	a0 70       	andi	r26, 0x00	; 0
     73c:	b0 70       	andi	r27, 0x00	; 0
     73e:	56 95       	lsr	r21
     740:	47 95       	ror	r20
     742:	37 95       	ror	r19
     744:	27 95       	ror	r18
     746:	82 2b       	or	r24, r18
     748:	93 2b       	or	r25, r19
     74a:	a4 2b       	or	r26, r20
     74c:	b5 2b       	or	r27, r21
     74e:	84 83       	std	Z+4, r24	; 0x04
     750:	95 83       	std	Z+5, r25	; 0x05
     752:	a6 83       	std	Z+6, r26	; 0x06
     754:	b7 83       	std	Z+7, r27	; 0x07
     756:	82 81       	ldd	r24, Z+2	; 0x02
     758:	93 81       	ldd	r25, Z+3	; 0x03
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	93 83       	std	Z+3, r25	; 0x03
     75e:	82 83       	std	Z+2, r24	; 0x02
     760:	df 01       	movw	r26, r30
     762:	01 c0       	rjmp	.+2      	; 0x766 <_fpadd_parts+0x28c>
     764:	d2 01       	movw	r26, r4
     766:	cd 01       	movw	r24, r26
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	e2 e1       	ldi	r30, 0x12	; 18
     76e:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__epilogue_restores__>

00000772 <__subsf3>:
     772:	a0 e2       	ldi	r26, 0x20	; 32
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	ef eb       	ldi	r30, 0xBF	; 191
     778:	f3 e0       	ldi	r31, 0x03	; 3
     77a:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__prologue_saves__+0x18>
     77e:	69 83       	std	Y+1, r22	; 0x01
     780:	7a 83       	std	Y+2, r23	; 0x02
     782:	8b 83       	std	Y+3, r24	; 0x03
     784:	9c 83       	std	Y+4, r25	; 0x04
     786:	2d 83       	std	Y+5, r18	; 0x05
     788:	3e 83       	std	Y+6, r19	; 0x06
     78a:	4f 83       	std	Y+7, r20	; 0x07
     78c:	58 87       	std	Y+8, r21	; 0x08
     78e:	e9 e0       	ldi	r30, 0x09	; 9
     790:	ee 2e       	mov	r14, r30
     792:	f1 2c       	mov	r15, r1
     794:	ec 0e       	add	r14, r28
     796:	fd 1e       	adc	r15, r29
     798:	ce 01       	movw	r24, r28
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	b7 01       	movw	r22, r14
     79e:	0e 94 23 08 	call	0x1046	; 0x1046 <__unpack_f>
     7a2:	8e 01       	movw	r16, r28
     7a4:	0f 5e       	subi	r16, 0xEF	; 239
     7a6:	1f 4f       	sbci	r17, 0xFF	; 255
     7a8:	ce 01       	movw	r24, r28
     7aa:	05 96       	adiw	r24, 0x05	; 5
     7ac:	b8 01       	movw	r22, r16
     7ae:	0e 94 23 08 	call	0x1046	; 0x1046 <__unpack_f>
     7b2:	8a 89       	ldd	r24, Y+18	; 0x12
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	89 27       	eor	r24, r25
     7b8:	8a 8b       	std	Y+18, r24	; 0x12
     7ba:	c7 01       	movw	r24, r14
     7bc:	b8 01       	movw	r22, r16
     7be:	ae 01       	movw	r20, r28
     7c0:	47 5e       	subi	r20, 0xE7	; 231
     7c2:	5f 4f       	sbci	r21, 0xFF	; 255
     7c4:	0e 94 6d 02 	call	0x4da	; 0x4da <_fpadd_parts>
     7c8:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__pack_f>
     7cc:	a0 96       	adiw	r28, 0x20	; 32
     7ce:	e6 e0       	ldi	r30, 0x06	; 6
     7d0:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__epilogue_restores__+0x18>

000007d4 <__addsf3>:
     7d4:	a0 e2       	ldi	r26, 0x20	; 32
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	e0 ef       	ldi	r30, 0xF0	; 240
     7da:	f3 e0       	ldi	r31, 0x03	; 3
     7dc:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__prologue_saves__+0x18>
     7e0:	69 83       	std	Y+1, r22	; 0x01
     7e2:	7a 83       	std	Y+2, r23	; 0x02
     7e4:	8b 83       	std	Y+3, r24	; 0x03
     7e6:	9c 83       	std	Y+4, r25	; 0x04
     7e8:	2d 83       	std	Y+5, r18	; 0x05
     7ea:	3e 83       	std	Y+6, r19	; 0x06
     7ec:	4f 83       	std	Y+7, r20	; 0x07
     7ee:	58 87       	std	Y+8, r21	; 0x08
     7f0:	f9 e0       	ldi	r31, 0x09	; 9
     7f2:	ef 2e       	mov	r14, r31
     7f4:	f1 2c       	mov	r15, r1
     7f6:	ec 0e       	add	r14, r28
     7f8:	fd 1e       	adc	r15, r29
     7fa:	ce 01       	movw	r24, r28
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	b7 01       	movw	r22, r14
     800:	0e 94 23 08 	call	0x1046	; 0x1046 <__unpack_f>
     804:	8e 01       	movw	r16, r28
     806:	0f 5e       	subi	r16, 0xEF	; 239
     808:	1f 4f       	sbci	r17, 0xFF	; 255
     80a:	ce 01       	movw	r24, r28
     80c:	05 96       	adiw	r24, 0x05	; 5
     80e:	b8 01       	movw	r22, r16
     810:	0e 94 23 08 	call	0x1046	; 0x1046 <__unpack_f>
     814:	c7 01       	movw	r24, r14
     816:	b8 01       	movw	r22, r16
     818:	ae 01       	movw	r20, r28
     81a:	47 5e       	subi	r20, 0xE7	; 231
     81c:	5f 4f       	sbci	r21, 0xFF	; 255
     81e:	0e 94 6d 02 	call	0x4da	; 0x4da <_fpadd_parts>
     822:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__pack_f>
     826:	a0 96       	adiw	r28, 0x20	; 32
     828:	e6 e0       	ldi	r30, 0x06	; 6
     82a:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__epilogue_restores__+0x18>

0000082e <__mulsf3>:
     82e:	a0 e2       	ldi	r26, 0x20	; 32
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	ed e1       	ldi	r30, 0x1D	; 29
     834:	f4 e0       	ldi	r31, 0x04	; 4
     836:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__prologue_saves__>
     83a:	69 83       	std	Y+1, r22	; 0x01
     83c:	7a 83       	std	Y+2, r23	; 0x02
     83e:	8b 83       	std	Y+3, r24	; 0x03
     840:	9c 83       	std	Y+4, r25	; 0x04
     842:	2d 83       	std	Y+5, r18	; 0x05
     844:	3e 83       	std	Y+6, r19	; 0x06
     846:	4f 83       	std	Y+7, r20	; 0x07
     848:	58 87       	std	Y+8, r21	; 0x08
     84a:	ce 01       	movw	r24, r28
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	be 01       	movw	r22, r28
     850:	67 5f       	subi	r22, 0xF7	; 247
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	0e 94 23 08 	call	0x1046	; 0x1046 <__unpack_f>
     858:	ce 01       	movw	r24, r28
     85a:	05 96       	adiw	r24, 0x05	; 5
     85c:	be 01       	movw	r22, r28
     85e:	6f 5e       	subi	r22, 0xEF	; 239
     860:	7f 4f       	sbci	r23, 0xFF	; 255
     862:	0e 94 23 08 	call	0x1046	; 0x1046 <__unpack_f>
     866:	99 85       	ldd	r25, Y+9	; 0x09
     868:	92 30       	cpi	r25, 0x02	; 2
     86a:	88 f0       	brcs	.+34     	; 0x88e <__mulsf3+0x60>
     86c:	89 89       	ldd	r24, Y+17	; 0x11
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	c8 f0       	brcs	.+50     	; 0x8a4 <__mulsf3+0x76>
     872:	94 30       	cpi	r25, 0x04	; 4
     874:	19 f4       	brne	.+6      	; 0x87c <__mulsf3+0x4e>
     876:	82 30       	cpi	r24, 0x02	; 2
     878:	51 f4       	brne	.+20     	; 0x88e <__mulsf3+0x60>
     87a:	04 c0       	rjmp	.+8      	; 0x884 <__mulsf3+0x56>
     87c:	84 30       	cpi	r24, 0x04	; 4
     87e:	29 f4       	brne	.+10     	; 0x88a <__mulsf3+0x5c>
     880:	92 30       	cpi	r25, 0x02	; 2
     882:	81 f4       	brne	.+32     	; 0x8a4 <__mulsf3+0x76>
     884:	80 e6       	ldi	r24, 0x60	; 96
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	c6 c0       	rjmp	.+396    	; 0xa16 <__mulsf3+0x1e8>
     88a:	92 30       	cpi	r25, 0x02	; 2
     88c:	49 f4       	brne	.+18     	; 0x8a0 <__mulsf3+0x72>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	9a 85       	ldd	r25, Y+10	; 0x0a
     892:	8a 89       	ldd	r24, Y+18	; 0x12
     894:	98 13       	cpse	r25, r24
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	2a 87       	std	Y+10, r18	; 0x0a
     89a:	ce 01       	movw	r24, r28
     89c:	09 96       	adiw	r24, 0x09	; 9
     89e:	bb c0       	rjmp	.+374    	; 0xa16 <__mulsf3+0x1e8>
     8a0:	82 30       	cpi	r24, 0x02	; 2
     8a2:	49 f4       	brne	.+18     	; 0x8b6 <__mulsf3+0x88>
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a8:	8a 89       	ldd	r24, Y+18	; 0x12
     8aa:	98 13       	cpse	r25, r24
     8ac:	21 e0       	ldi	r18, 0x01	; 1
     8ae:	2a 8b       	std	Y+18, r18	; 0x12
     8b0:	ce 01       	movw	r24, r28
     8b2:	41 96       	adiw	r24, 0x11	; 17
     8b4:	b0 c0       	rjmp	.+352    	; 0xa16 <__mulsf3+0x1e8>
     8b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     8b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     8ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     8bc:	58 88       	ldd	r5, Y+16	; 0x10
     8be:	6d 88       	ldd	r6, Y+21	; 0x15
     8c0:	7e 88       	ldd	r7, Y+22	; 0x16
     8c2:	8f 88       	ldd	r8, Y+23	; 0x17
     8c4:	98 8c       	ldd	r9, Y+24	; 0x18
     8c6:	ee 24       	eor	r14, r14
     8c8:	ff 24       	eor	r15, r15
     8ca:	87 01       	movw	r16, r14
     8cc:	aa 24       	eor	r10, r10
     8ce:	bb 24       	eor	r11, r11
     8d0:	65 01       	movw	r12, r10
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	e0 e0       	ldi	r30, 0x00	; 0
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	c1 01       	movw	r24, r2
     8e0:	81 70       	andi	r24, 0x01	; 1
     8e2:	90 70       	andi	r25, 0x00	; 0
     8e4:	89 2b       	or	r24, r25
     8e6:	e9 f0       	breq	.+58     	; 0x922 <__mulsf3+0xf4>
     8e8:	e6 0c       	add	r14, r6
     8ea:	f7 1c       	adc	r15, r7
     8ec:	08 1d       	adc	r16, r8
     8ee:	19 1d       	adc	r17, r9
     8f0:	9a 01       	movw	r18, r20
     8f2:	ab 01       	movw	r20, r22
     8f4:	2a 0d       	add	r18, r10
     8f6:	3b 1d       	adc	r19, r11
     8f8:	4c 1d       	adc	r20, r12
     8fa:	5d 1d       	adc	r21, r13
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	e6 14       	cp	r14, r6
     906:	f7 04       	cpc	r15, r7
     908:	08 05       	cpc	r16, r8
     90a:	19 05       	cpc	r17, r9
     90c:	20 f4       	brcc	.+8      	; 0x916 <__mulsf3+0xe8>
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	a0 e0       	ldi	r26, 0x00	; 0
     914:	b0 e0       	ldi	r27, 0x00	; 0
     916:	ba 01       	movw	r22, r20
     918:	a9 01       	movw	r20, r18
     91a:	48 0f       	add	r20, r24
     91c:	59 1f       	adc	r21, r25
     91e:	6a 1f       	adc	r22, r26
     920:	7b 1f       	adc	r23, r27
     922:	aa 0c       	add	r10, r10
     924:	bb 1c       	adc	r11, r11
     926:	cc 1c       	adc	r12, r12
     928:	dd 1c       	adc	r13, r13
     92a:	97 fe       	sbrs	r9, 7
     92c:	08 c0       	rjmp	.+16     	; 0x93e <__mulsf3+0x110>
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	a8 2a       	or	r10, r24
     938:	b9 2a       	or	r11, r25
     93a:	ca 2a       	or	r12, r26
     93c:	db 2a       	or	r13, r27
     93e:	31 96       	adiw	r30, 0x01	; 1
     940:	e0 32       	cpi	r30, 0x20	; 32
     942:	f1 05       	cpc	r31, r1
     944:	49 f0       	breq	.+18     	; 0x958 <__mulsf3+0x12a>
     946:	66 0c       	add	r6, r6
     948:	77 1c       	adc	r7, r7
     94a:	88 1c       	adc	r8, r8
     94c:	99 1c       	adc	r9, r9
     94e:	56 94       	lsr	r5
     950:	47 94       	ror	r4
     952:	37 94       	ror	r3
     954:	27 94       	ror	r2
     956:	c3 cf       	rjmp	.-122    	; 0x8de <__mulsf3+0xb0>
     958:	fa 85       	ldd	r31, Y+10	; 0x0a
     95a:	ea 89       	ldd	r30, Y+18	; 0x12
     95c:	2b 89       	ldd	r18, Y+19	; 0x13
     95e:	3c 89       	ldd	r19, Y+20	; 0x14
     960:	8b 85       	ldd	r24, Y+11	; 0x0b
     962:	9c 85       	ldd	r25, Y+12	; 0x0c
     964:	28 0f       	add	r18, r24
     966:	39 1f       	adc	r19, r25
     968:	2e 5f       	subi	r18, 0xFE	; 254
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	17 c0       	rjmp	.+46     	; 0x99c <__mulsf3+0x16e>
     96e:	ca 01       	movw	r24, r20
     970:	81 70       	andi	r24, 0x01	; 1
     972:	90 70       	andi	r25, 0x00	; 0
     974:	89 2b       	or	r24, r25
     976:	61 f0       	breq	.+24     	; 0x990 <__mulsf3+0x162>
     978:	16 95       	lsr	r17
     97a:	07 95       	ror	r16
     97c:	f7 94       	ror	r15
     97e:	e7 94       	ror	r14
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b0 e8       	ldi	r27, 0x80	; 128
     988:	e8 2a       	or	r14, r24
     98a:	f9 2a       	or	r15, r25
     98c:	0a 2b       	or	r16, r26
     98e:	1b 2b       	or	r17, r27
     990:	76 95       	lsr	r23
     992:	67 95       	ror	r22
     994:	57 95       	ror	r21
     996:	47 95       	ror	r20
     998:	2f 5f       	subi	r18, 0xFF	; 255
     99a:	3f 4f       	sbci	r19, 0xFF	; 255
     99c:	77 fd       	sbrc	r23, 7
     99e:	e7 cf       	rjmp	.-50     	; 0x96e <__mulsf3+0x140>
     9a0:	0c c0       	rjmp	.+24     	; 0x9ba <__mulsf3+0x18c>
     9a2:	44 0f       	add	r20, r20
     9a4:	55 1f       	adc	r21, r21
     9a6:	66 1f       	adc	r22, r22
     9a8:	77 1f       	adc	r23, r23
     9aa:	17 fd       	sbrc	r17, 7
     9ac:	41 60       	ori	r20, 0x01	; 1
     9ae:	ee 0c       	add	r14, r14
     9b0:	ff 1c       	adc	r15, r15
     9b2:	00 1f       	adc	r16, r16
     9b4:	11 1f       	adc	r17, r17
     9b6:	21 50       	subi	r18, 0x01	; 1
     9b8:	30 40       	sbci	r19, 0x00	; 0
     9ba:	40 30       	cpi	r20, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	59 07       	cpc	r21, r25
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	69 07       	cpc	r22, r25
     9c4:	90 e4       	ldi	r25, 0x40	; 64
     9c6:	79 07       	cpc	r23, r25
     9c8:	60 f3       	brcs	.-40     	; 0x9a2 <__mulsf3+0x174>
     9ca:	2b 8f       	std	Y+27, r18	; 0x1b
     9cc:	3c 8f       	std	Y+28, r19	; 0x1c
     9ce:	db 01       	movw	r26, r22
     9d0:	ca 01       	movw	r24, r20
     9d2:	8f 77       	andi	r24, 0x7F	; 127
     9d4:	90 70       	andi	r25, 0x00	; 0
     9d6:	a0 70       	andi	r26, 0x00	; 0
     9d8:	b0 70       	andi	r27, 0x00	; 0
     9da:	80 34       	cpi	r24, 0x40	; 64
     9dc:	91 05       	cpc	r25, r1
     9de:	a1 05       	cpc	r26, r1
     9e0:	b1 05       	cpc	r27, r1
     9e2:	61 f4       	brne	.+24     	; 0x9fc <__mulsf3+0x1ce>
     9e4:	47 fd       	sbrc	r20, 7
     9e6:	0a c0       	rjmp	.+20     	; 0x9fc <__mulsf3+0x1ce>
     9e8:	e1 14       	cp	r14, r1
     9ea:	f1 04       	cpc	r15, r1
     9ec:	01 05       	cpc	r16, r1
     9ee:	11 05       	cpc	r17, r1
     9f0:	29 f0       	breq	.+10     	; 0x9fc <__mulsf3+0x1ce>
     9f2:	40 5c       	subi	r20, 0xC0	; 192
     9f4:	5f 4f       	sbci	r21, 0xFF	; 255
     9f6:	6f 4f       	sbci	r22, 0xFF	; 255
     9f8:	7f 4f       	sbci	r23, 0xFF	; 255
     9fa:	40 78       	andi	r20, 0x80	; 128
     9fc:	1a 8e       	std	Y+26, r1	; 0x1a
     9fe:	fe 17       	cp	r31, r30
     a00:	11 f0       	breq	.+4      	; 0xa06 <__mulsf3+0x1d8>
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	8a 8f       	std	Y+26, r24	; 0x1a
     a06:	4d 8f       	std	Y+29, r20	; 0x1d
     a08:	5e 8f       	std	Y+30, r21	; 0x1e
     a0a:	6f 8f       	std	Y+31, r22	; 0x1f
     a0c:	78 a3       	std	Y+32, r23	; 0x20
     a0e:	83 e0       	ldi	r24, 0x03	; 3
     a10:	89 8f       	std	Y+25, r24	; 0x19
     a12:	ce 01       	movw	r24, r28
     a14:	49 96       	adiw	r24, 0x19	; 25
     a16:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__pack_f>
     a1a:	a0 96       	adiw	r28, 0x20	; 32
     a1c:	e2 e1       	ldi	r30, 0x12	; 18
     a1e:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__epilogue_restores__>

00000a22 <__divsf3>:
     a22:	a8 e1       	ldi	r26, 0x18	; 24
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__prologue_saves__+0x10>
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	2d 83       	std	Y+5, r18	; 0x05
     a38:	3e 83       	std	Y+6, r19	; 0x06
     a3a:	4f 83       	std	Y+7, r20	; 0x07
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	b9 e0       	ldi	r27, 0x09	; 9
     a40:	eb 2e       	mov	r14, r27
     a42:	f1 2c       	mov	r15, r1
     a44:	ec 0e       	add	r14, r28
     a46:	fd 1e       	adc	r15, r29
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 23 08 	call	0x1046	; 0x1046 <__unpack_f>
     a52:	8e 01       	movw	r16, r28
     a54:	0f 5e       	subi	r16, 0xEF	; 239
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ce 01       	movw	r24, r28
     a5a:	05 96       	adiw	r24, 0x05	; 5
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 23 08 	call	0x1046	; 0x1046 <__unpack_f>
     a62:	29 85       	ldd	r18, Y+9	; 0x09
     a64:	22 30       	cpi	r18, 0x02	; 2
     a66:	08 f4       	brcc	.+2      	; 0xa6a <__divsf3+0x48>
     a68:	7e c0       	rjmp	.+252    	; 0xb66 <__divsf3+0x144>
     a6a:	39 89       	ldd	r19, Y+17	; 0x11
     a6c:	32 30       	cpi	r19, 0x02	; 2
     a6e:	10 f4       	brcc	.+4      	; 0xa74 <__divsf3+0x52>
     a70:	b8 01       	movw	r22, r16
     a72:	7c c0       	rjmp	.+248    	; 0xb6c <__divsf3+0x14a>
     a74:	8a 85       	ldd	r24, Y+10	; 0x0a
     a76:	9a 89       	ldd	r25, Y+18	; 0x12
     a78:	89 27       	eor	r24, r25
     a7a:	8a 87       	std	Y+10, r24	; 0x0a
     a7c:	24 30       	cpi	r18, 0x04	; 4
     a7e:	11 f0       	breq	.+4      	; 0xa84 <__divsf3+0x62>
     a80:	22 30       	cpi	r18, 0x02	; 2
     a82:	31 f4       	brne	.+12     	; 0xa90 <__divsf3+0x6e>
     a84:	23 17       	cp	r18, r19
     a86:	09 f0       	breq	.+2      	; 0xa8a <__divsf3+0x68>
     a88:	6e c0       	rjmp	.+220    	; 0xb66 <__divsf3+0x144>
     a8a:	60 e6       	ldi	r22, 0x60	; 96
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	6e c0       	rjmp	.+220    	; 0xb6c <__divsf3+0x14a>
     a90:	34 30       	cpi	r19, 0x04	; 4
     a92:	39 f4       	brne	.+14     	; 0xaa2 <__divsf3+0x80>
     a94:	1d 86       	std	Y+13, r1	; 0x0d
     a96:	1e 86       	std	Y+14, r1	; 0x0e
     a98:	1f 86       	std	Y+15, r1	; 0x0f
     a9a:	18 8a       	std	Y+16, r1	; 0x10
     a9c:	1c 86       	std	Y+12, r1	; 0x0c
     a9e:	1b 86       	std	Y+11, r1	; 0x0b
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__divsf3+0x88>
     aa2:	32 30       	cpi	r19, 0x02	; 2
     aa4:	21 f4       	brne	.+8      	; 0xaae <__divsf3+0x8c>
     aa6:	84 e0       	ldi	r24, 0x04	; 4
     aa8:	89 87       	std	Y+9, r24	; 0x09
     aaa:	b7 01       	movw	r22, r14
     aac:	5f c0       	rjmp	.+190    	; 0xb6c <__divsf3+0x14a>
     aae:	2b 85       	ldd	r18, Y+11	; 0x0b
     ab0:	3c 85       	ldd	r19, Y+12	; 0x0c
     ab2:	8b 89       	ldd	r24, Y+19	; 0x13
     ab4:	9c 89       	ldd	r25, Y+20	; 0x14
     ab6:	28 1b       	sub	r18, r24
     ab8:	39 0b       	sbc	r19, r25
     aba:	3c 87       	std	Y+12, r19	; 0x0c
     abc:	2b 87       	std	Y+11, r18	; 0x0b
     abe:	ed 84       	ldd	r14, Y+13	; 0x0d
     ac0:	fe 84       	ldd	r15, Y+14	; 0x0e
     ac2:	0f 85       	ldd	r16, Y+15	; 0x0f
     ac4:	18 89       	ldd	r17, Y+16	; 0x10
     ac6:	ad 88       	ldd	r10, Y+21	; 0x15
     ac8:	be 88       	ldd	r11, Y+22	; 0x16
     aca:	cf 88       	ldd	r12, Y+23	; 0x17
     acc:	d8 8c       	ldd	r13, Y+24	; 0x18
     ace:	ea 14       	cp	r14, r10
     ad0:	fb 04       	cpc	r15, r11
     ad2:	0c 05       	cpc	r16, r12
     ad4:	1d 05       	cpc	r17, r13
     ad6:	40 f4       	brcc	.+16     	; 0xae8 <__divsf3+0xc6>
     ad8:	ee 0c       	add	r14, r14
     ada:	ff 1c       	adc	r15, r15
     adc:	00 1f       	adc	r16, r16
     ade:	11 1f       	adc	r17, r17
     ae0:	21 50       	subi	r18, 0x01	; 1
     ae2:	30 40       	sbci	r19, 0x00	; 0
     ae4:	3c 87       	std	Y+12, r19	; 0x0c
     ae6:	2b 87       	std	Y+11, r18	; 0x0b
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	a0 e0       	ldi	r26, 0x00	; 0
     af6:	b0 e4       	ldi	r27, 0x40	; 64
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	ea 14       	cp	r14, r10
     afe:	fb 04       	cpc	r15, r11
     b00:	0c 05       	cpc	r16, r12
     b02:	1d 05       	cpc	r17, r13
     b04:	40 f0       	brcs	.+16     	; 0xb16 <__divsf3+0xf4>
     b06:	28 2b       	or	r18, r24
     b08:	39 2b       	or	r19, r25
     b0a:	4a 2b       	or	r20, r26
     b0c:	5b 2b       	or	r21, r27
     b0e:	ea 18       	sub	r14, r10
     b10:	fb 08       	sbc	r15, r11
     b12:	0c 09       	sbc	r16, r12
     b14:	1d 09       	sbc	r17, r13
     b16:	b6 95       	lsr	r27
     b18:	a7 95       	ror	r26
     b1a:	97 95       	ror	r25
     b1c:	87 95       	ror	r24
     b1e:	ee 0c       	add	r14, r14
     b20:	ff 1c       	adc	r15, r15
     b22:	00 1f       	adc	r16, r16
     b24:	11 1f       	adc	r17, r17
     b26:	6f 5f       	subi	r22, 0xFF	; 255
     b28:	7f 4f       	sbci	r23, 0xFF	; 255
     b2a:	6f 31       	cpi	r22, 0x1F	; 31
     b2c:	71 05       	cpc	r23, r1
     b2e:	31 f7       	brne	.-52     	; 0xafc <__divsf3+0xda>
     b30:	da 01       	movw	r26, r20
     b32:	c9 01       	movw	r24, r18
     b34:	8f 77       	andi	r24, 0x7F	; 127
     b36:	90 70       	andi	r25, 0x00	; 0
     b38:	a0 70       	andi	r26, 0x00	; 0
     b3a:	b0 70       	andi	r27, 0x00	; 0
     b3c:	80 34       	cpi	r24, 0x40	; 64
     b3e:	91 05       	cpc	r25, r1
     b40:	a1 05       	cpc	r26, r1
     b42:	b1 05       	cpc	r27, r1
     b44:	61 f4       	brne	.+24     	; 0xb5e <__divsf3+0x13c>
     b46:	27 fd       	sbrc	r18, 7
     b48:	0a c0       	rjmp	.+20     	; 0xb5e <__divsf3+0x13c>
     b4a:	e1 14       	cp	r14, r1
     b4c:	f1 04       	cpc	r15, r1
     b4e:	01 05       	cpc	r16, r1
     b50:	11 05       	cpc	r17, r1
     b52:	29 f0       	breq	.+10     	; 0xb5e <__divsf3+0x13c>
     b54:	20 5c       	subi	r18, 0xC0	; 192
     b56:	3f 4f       	sbci	r19, 0xFF	; 255
     b58:	4f 4f       	sbci	r20, 0xFF	; 255
     b5a:	5f 4f       	sbci	r21, 0xFF	; 255
     b5c:	20 78       	andi	r18, 0x80	; 128
     b5e:	2d 87       	std	Y+13, r18	; 0x0d
     b60:	3e 87       	std	Y+14, r19	; 0x0e
     b62:	4f 87       	std	Y+15, r20	; 0x0f
     b64:	58 8b       	std	Y+16, r21	; 0x10
     b66:	be 01       	movw	r22, r28
     b68:	67 5f       	subi	r22, 0xF7	; 247
     b6a:	7f 4f       	sbci	r23, 0xFF	; 255
     b6c:	cb 01       	movw	r24, r22
     b6e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__pack_f>
     b72:	68 96       	adiw	r28, 0x18	; 24
     b74:	ea e0       	ldi	r30, 0x0A	; 10
     b76:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__epilogue_restores__+0x10>

00000b7a <__gtsf2>:
     b7a:	a8 e1       	ldi	r26, 0x18	; 24
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e3 ec       	ldi	r30, 0xC3	; 195
     b80:	f5 e0       	ldi	r31, 0x05	; 5
     b82:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__prologue_saves__+0x18>
     b86:	69 83       	std	Y+1, r22	; 0x01
     b88:	7a 83       	std	Y+2, r23	; 0x02
     b8a:	8b 83       	std	Y+3, r24	; 0x03
     b8c:	9c 83       	std	Y+4, r25	; 0x04
     b8e:	2d 83       	std	Y+5, r18	; 0x05
     b90:	3e 83       	std	Y+6, r19	; 0x06
     b92:	4f 83       	std	Y+7, r20	; 0x07
     b94:	58 87       	std	Y+8, r21	; 0x08
     b96:	89 e0       	ldi	r24, 0x09	; 9
     b98:	e8 2e       	mov	r14, r24
     b9a:	f1 2c       	mov	r15, r1
     b9c:	ec 0e       	add	r14, r28
     b9e:	fd 1e       	adc	r15, r29
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	b7 01       	movw	r22, r14
     ba6:	0e 94 23 08 	call	0x1046	; 0x1046 <__unpack_f>
     baa:	8e 01       	movw	r16, r28
     bac:	0f 5e       	subi	r16, 0xEF	; 239
     bae:	1f 4f       	sbci	r17, 0xFF	; 255
     bb0:	ce 01       	movw	r24, r28
     bb2:	05 96       	adiw	r24, 0x05	; 5
     bb4:	b8 01       	movw	r22, r16
     bb6:	0e 94 23 08 	call	0x1046	; 0x1046 <__unpack_f>
     bba:	89 85       	ldd	r24, Y+9	; 0x09
     bbc:	82 30       	cpi	r24, 0x02	; 2
     bbe:	40 f0       	brcs	.+16     	; 0xbd0 <__gtsf2+0x56>
     bc0:	89 89       	ldd	r24, Y+17	; 0x11
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	28 f0       	brcs	.+10     	; 0xbd0 <__gtsf2+0x56>
     bc6:	c7 01       	movw	r24, r14
     bc8:	b8 01       	movw	r22, r16
     bca:	0e 94 9b 08 	call	0x1136	; 0x1136 <__fpcmp_parts_f>
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <__gtsf2+0x58>
     bd0:	8f ef       	ldi	r24, 0xFF	; 255
     bd2:	68 96       	adiw	r28, 0x18	; 24
     bd4:	e6 e0       	ldi	r30, 0x06	; 6
     bd6:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__epilogue_restores__+0x18>

00000bda <__gesf2>:
     bda:	a8 e1       	ldi	r26, 0x18	; 24
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e3 ef       	ldi	r30, 0xF3	; 243
     be0:	f5 e0       	ldi	r31, 0x05	; 5
     be2:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__prologue_saves__+0x18>
     be6:	69 83       	std	Y+1, r22	; 0x01
     be8:	7a 83       	std	Y+2, r23	; 0x02
     bea:	8b 83       	std	Y+3, r24	; 0x03
     bec:	9c 83       	std	Y+4, r25	; 0x04
     bee:	2d 83       	std	Y+5, r18	; 0x05
     bf0:	3e 83       	std	Y+6, r19	; 0x06
     bf2:	4f 83       	std	Y+7, r20	; 0x07
     bf4:	58 87       	std	Y+8, r21	; 0x08
     bf6:	89 e0       	ldi	r24, 0x09	; 9
     bf8:	e8 2e       	mov	r14, r24
     bfa:	f1 2c       	mov	r15, r1
     bfc:	ec 0e       	add	r14, r28
     bfe:	fd 1e       	adc	r15, r29
     c00:	ce 01       	movw	r24, r28
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	b7 01       	movw	r22, r14
     c06:	0e 94 23 08 	call	0x1046	; 0x1046 <__unpack_f>
     c0a:	8e 01       	movw	r16, r28
     c0c:	0f 5e       	subi	r16, 0xEF	; 239
     c0e:	1f 4f       	sbci	r17, 0xFF	; 255
     c10:	ce 01       	movw	r24, r28
     c12:	05 96       	adiw	r24, 0x05	; 5
     c14:	b8 01       	movw	r22, r16
     c16:	0e 94 23 08 	call	0x1046	; 0x1046 <__unpack_f>
     c1a:	89 85       	ldd	r24, Y+9	; 0x09
     c1c:	82 30       	cpi	r24, 0x02	; 2
     c1e:	40 f0       	brcs	.+16     	; 0xc30 <__gesf2+0x56>
     c20:	89 89       	ldd	r24, Y+17	; 0x11
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	28 f0       	brcs	.+10     	; 0xc30 <__gesf2+0x56>
     c26:	c7 01       	movw	r24, r14
     c28:	b8 01       	movw	r22, r16
     c2a:	0e 94 9b 08 	call	0x1136	; 0x1136 <__fpcmp_parts_f>
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <__gesf2+0x58>
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	68 96       	adiw	r28, 0x18	; 24
     c34:	e6 e0       	ldi	r30, 0x06	; 6
     c36:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__epilogue_restores__+0x18>

00000c3a <__ltsf2>:
     c3a:	a8 e1       	ldi	r26, 0x18	; 24
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e3 e2       	ldi	r30, 0x23	; 35
     c40:	f6 e0       	ldi	r31, 0x06	; 6
     c42:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__prologue_saves__+0x18>
     c46:	69 83       	std	Y+1, r22	; 0x01
     c48:	7a 83       	std	Y+2, r23	; 0x02
     c4a:	8b 83       	std	Y+3, r24	; 0x03
     c4c:	9c 83       	std	Y+4, r25	; 0x04
     c4e:	2d 83       	std	Y+5, r18	; 0x05
     c50:	3e 83       	std	Y+6, r19	; 0x06
     c52:	4f 83       	std	Y+7, r20	; 0x07
     c54:	58 87       	std	Y+8, r21	; 0x08
     c56:	89 e0       	ldi	r24, 0x09	; 9
     c58:	e8 2e       	mov	r14, r24
     c5a:	f1 2c       	mov	r15, r1
     c5c:	ec 0e       	add	r14, r28
     c5e:	fd 1e       	adc	r15, r29
     c60:	ce 01       	movw	r24, r28
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	b7 01       	movw	r22, r14
     c66:	0e 94 23 08 	call	0x1046	; 0x1046 <__unpack_f>
     c6a:	8e 01       	movw	r16, r28
     c6c:	0f 5e       	subi	r16, 0xEF	; 239
     c6e:	1f 4f       	sbci	r17, 0xFF	; 255
     c70:	ce 01       	movw	r24, r28
     c72:	05 96       	adiw	r24, 0x05	; 5
     c74:	b8 01       	movw	r22, r16
     c76:	0e 94 23 08 	call	0x1046	; 0x1046 <__unpack_f>
     c7a:	89 85       	ldd	r24, Y+9	; 0x09
     c7c:	82 30       	cpi	r24, 0x02	; 2
     c7e:	40 f0       	brcs	.+16     	; 0xc90 <__ltsf2+0x56>
     c80:	89 89       	ldd	r24, Y+17	; 0x11
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	28 f0       	brcs	.+10     	; 0xc90 <__ltsf2+0x56>
     c86:	c7 01       	movw	r24, r14
     c88:	b8 01       	movw	r22, r16
     c8a:	0e 94 9b 08 	call	0x1136	; 0x1136 <__fpcmp_parts_f>
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <__ltsf2+0x58>
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	68 96       	adiw	r28, 0x18	; 24
     c94:	e6 e0       	ldi	r30, 0x06	; 6
     c96:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__epilogue_restores__+0x18>

00000c9a <__floatsisf>:
     c9a:	a8 e0       	ldi	r26, 0x08	; 8
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e3 e5       	ldi	r30, 0x53	; 83
     ca0:	f6 e0       	ldi	r31, 0x06	; 6
     ca2:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <__prologue_saves__+0x12>
     ca6:	9b 01       	movw	r18, r22
     ca8:	ac 01       	movw	r20, r24
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	da 01       	movw	r26, r20
     cb0:	c9 01       	movw	r24, r18
     cb2:	88 27       	eor	r24, r24
     cb4:	b7 fd       	sbrc	r27, 7
     cb6:	83 95       	inc	r24
     cb8:	99 27       	eor	r25, r25
     cba:	aa 27       	eor	r26, r26
     cbc:	bb 27       	eor	r27, r27
     cbe:	b8 2e       	mov	r11, r24
     cc0:	21 15       	cp	r18, r1
     cc2:	31 05       	cpc	r19, r1
     cc4:	41 05       	cpc	r20, r1
     cc6:	51 05       	cpc	r21, r1
     cc8:	19 f4       	brne	.+6      	; 0xcd0 <__floatsisf+0x36>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	89 83       	std	Y+1, r24	; 0x01
     cce:	3a c0       	rjmp	.+116    	; 0xd44 <__floatsisf+0xaa>
     cd0:	88 23       	and	r24, r24
     cd2:	a9 f0       	breq	.+42     	; 0xcfe <__floatsisf+0x64>
     cd4:	20 30       	cpi	r18, 0x00	; 0
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	38 07       	cpc	r19, r24
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	48 07       	cpc	r20, r24
     cde:	80 e8       	ldi	r24, 0x80	; 128
     ce0:	58 07       	cpc	r21, r24
     ce2:	29 f4       	brne	.+10     	; 0xcee <__floatsisf+0x54>
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	9f ec       	ldi	r25, 0xCF	; 207
     cec:	30 c0       	rjmp	.+96     	; 0xd4e <__floatsisf+0xb4>
     cee:	ee 24       	eor	r14, r14
     cf0:	ff 24       	eor	r15, r15
     cf2:	87 01       	movw	r16, r14
     cf4:	e2 1a       	sub	r14, r18
     cf6:	f3 0a       	sbc	r15, r19
     cf8:	04 0b       	sbc	r16, r20
     cfa:	15 0b       	sbc	r17, r21
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <__floatsisf+0x68>
     cfe:	79 01       	movw	r14, r18
     d00:	8a 01       	movw	r16, r20
     d02:	8e e1       	ldi	r24, 0x1E	; 30
     d04:	c8 2e       	mov	r12, r24
     d06:	d1 2c       	mov	r13, r1
     d08:	dc 82       	std	Y+4, r13	; 0x04
     d0a:	cb 82       	std	Y+3, r12	; 0x03
     d0c:	ed 82       	std	Y+5, r14	; 0x05
     d0e:	fe 82       	std	Y+6, r15	; 0x06
     d10:	0f 83       	std	Y+7, r16	; 0x07
     d12:	18 87       	std	Y+8, r17	; 0x08
     d14:	c8 01       	movw	r24, r16
     d16:	b7 01       	movw	r22, r14
     d18:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__clzsi2>
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	18 16       	cp	r1, r24
     d20:	19 06       	cpc	r1, r25
     d22:	84 f4       	brge	.+32     	; 0xd44 <__floatsisf+0xaa>
     d24:	08 2e       	mov	r0, r24
     d26:	04 c0       	rjmp	.+8      	; 0xd30 <__floatsisf+0x96>
     d28:	ee 0c       	add	r14, r14
     d2a:	ff 1c       	adc	r15, r15
     d2c:	00 1f       	adc	r16, r16
     d2e:	11 1f       	adc	r17, r17
     d30:	0a 94       	dec	r0
     d32:	d2 f7       	brpl	.-12     	; 0xd28 <__floatsisf+0x8e>
     d34:	ed 82       	std	Y+5, r14	; 0x05
     d36:	fe 82       	std	Y+6, r15	; 0x06
     d38:	0f 83       	std	Y+7, r16	; 0x07
     d3a:	18 87       	std	Y+8, r17	; 0x08
     d3c:	c8 1a       	sub	r12, r24
     d3e:	d9 0a       	sbc	r13, r25
     d40:	dc 82       	std	Y+4, r13	; 0x04
     d42:	cb 82       	std	Y+3, r12	; 0x03
     d44:	ba 82       	std	Y+2, r11	; 0x02
     d46:	ce 01       	movw	r24, r28
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__pack_f>
     d4e:	28 96       	adiw	r28, 0x08	; 8
     d50:	e9 e0       	ldi	r30, 0x09	; 9
     d52:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__epilogue_restores__+0x12>

00000d56 <__fixsfsi>:
     d56:	ac e0       	ldi	r26, 0x0C	; 12
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e1 eb       	ldi	r30, 0xB1	; 177
     d5c:	f6 e0       	ldi	r31, 0x06	; 6
     d5e:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__prologue_saves__+0x20>
     d62:	69 83       	std	Y+1, r22	; 0x01
     d64:	7a 83       	std	Y+2, r23	; 0x02
     d66:	8b 83       	std	Y+3, r24	; 0x03
     d68:	9c 83       	std	Y+4, r25	; 0x04
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	be 01       	movw	r22, r28
     d70:	6b 5f       	subi	r22, 0xFB	; 251
     d72:	7f 4f       	sbci	r23, 0xFF	; 255
     d74:	0e 94 23 08 	call	0x1046	; 0x1046 <__unpack_f>
     d78:	8d 81       	ldd	r24, Y+5	; 0x05
     d7a:	82 30       	cpi	r24, 0x02	; 2
     d7c:	61 f1       	breq	.+88     	; 0xdd6 <__fixsfsi+0x80>
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	50 f1       	brcs	.+84     	; 0xdd6 <__fixsfsi+0x80>
     d82:	84 30       	cpi	r24, 0x04	; 4
     d84:	21 f4       	brne	.+8      	; 0xd8e <__fixsfsi+0x38>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	88 23       	and	r24, r24
     d8a:	51 f1       	breq	.+84     	; 0xde0 <__fixsfsi+0x8a>
     d8c:	2e c0       	rjmp	.+92     	; 0xdea <__fixsfsi+0x94>
     d8e:	2f 81       	ldd	r18, Y+7	; 0x07
     d90:	38 85       	ldd	r19, Y+8	; 0x08
     d92:	37 fd       	sbrc	r19, 7
     d94:	20 c0       	rjmp	.+64     	; 0xdd6 <__fixsfsi+0x80>
     d96:	6e 81       	ldd	r22, Y+6	; 0x06
     d98:	2f 31       	cpi	r18, 0x1F	; 31
     d9a:	31 05       	cpc	r19, r1
     d9c:	1c f0       	brlt	.+6      	; 0xda4 <__fixsfsi+0x4e>
     d9e:	66 23       	and	r22, r22
     da0:	f9 f0       	breq	.+62     	; 0xde0 <__fixsfsi+0x8a>
     da2:	23 c0       	rjmp	.+70     	; 0xdea <__fixsfsi+0x94>
     da4:	8e e1       	ldi	r24, 0x1E	; 30
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	82 1b       	sub	r24, r18
     daa:	93 0b       	sbc	r25, r19
     dac:	29 85       	ldd	r18, Y+9	; 0x09
     dae:	3a 85       	ldd	r19, Y+10	; 0x0a
     db0:	4b 85       	ldd	r20, Y+11	; 0x0b
     db2:	5c 85       	ldd	r21, Y+12	; 0x0c
     db4:	04 c0       	rjmp	.+8      	; 0xdbe <__fixsfsi+0x68>
     db6:	56 95       	lsr	r21
     db8:	47 95       	ror	r20
     dba:	37 95       	ror	r19
     dbc:	27 95       	ror	r18
     dbe:	8a 95       	dec	r24
     dc0:	d2 f7       	brpl	.-12     	; 0xdb6 <__fixsfsi+0x60>
     dc2:	66 23       	and	r22, r22
     dc4:	b1 f0       	breq	.+44     	; 0xdf2 <__fixsfsi+0x9c>
     dc6:	50 95       	com	r21
     dc8:	40 95       	com	r20
     dca:	30 95       	com	r19
     dcc:	21 95       	neg	r18
     dce:	3f 4f       	sbci	r19, 0xFF	; 255
     dd0:	4f 4f       	sbci	r20, 0xFF	; 255
     dd2:	5f 4f       	sbci	r21, 0xFF	; 255
     dd4:	0e c0       	rjmp	.+28     	; 0xdf2 <__fixsfsi+0x9c>
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	09 c0       	rjmp	.+18     	; 0xdf2 <__fixsfsi+0x9c>
     de0:	2f ef       	ldi	r18, 0xFF	; 255
     de2:	3f ef       	ldi	r19, 0xFF	; 255
     de4:	4f ef       	ldi	r20, 0xFF	; 255
     de6:	5f e7       	ldi	r21, 0x7F	; 127
     de8:	04 c0       	rjmp	.+8      	; 0xdf2 <__fixsfsi+0x9c>
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	50 e8       	ldi	r21, 0x80	; 128
     df2:	b9 01       	movw	r22, r18
     df4:	ca 01       	movw	r24, r20
     df6:	2c 96       	adiw	r28, 0x0c	; 12
     df8:	e2 e0       	ldi	r30, 0x02	; 2
     dfa:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__epilogue_restores__+0x20>

00000dfe <__clzsi2>:
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	7b 01       	movw	r14, r22
     e08:	8c 01       	movw	r16, r24
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	e8 16       	cp	r14, r24
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	f8 06       	cpc	r15, r24
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	08 07       	cpc	r16, r24
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	18 07       	cpc	r17, r24
     e1a:	88 f4       	brcc	.+34     	; 0xe3e <__clzsi2+0x40>
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	e8 16       	cp	r14, r24
     e20:	f1 04       	cpc	r15, r1
     e22:	01 05       	cpc	r16, r1
     e24:	11 05       	cpc	r17, r1
     e26:	31 f0       	breq	.+12     	; 0xe34 <__clzsi2+0x36>
     e28:	28 f0       	brcs	.+10     	; 0xe34 <__clzsi2+0x36>
     e2a:	88 e0       	ldi	r24, 0x08	; 8
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	a0 e0       	ldi	r26, 0x00	; 0
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	17 c0       	rjmp	.+46     	; 0xe62 <__clzsi2+0x64>
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	a0 e0       	ldi	r26, 0x00	; 0
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	12 c0       	rjmp	.+36     	; 0xe62 <__clzsi2+0x64>
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	e8 16       	cp	r14, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	f8 06       	cpc	r15, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	08 07       	cpc	r16, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	18 07       	cpc	r17, r24
     e4e:	28 f0       	brcs	.+10     	; 0xe5a <__clzsi2+0x5c>
     e50:	88 e1       	ldi	r24, 0x18	; 24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	a0 e0       	ldi	r26, 0x00	; 0
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <__clzsi2+0x64>
     e5a:	80 e1       	ldi	r24, 0x10	; 16
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	a0 e0       	ldi	r26, 0x00	; 0
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	20 e2       	ldi	r18, 0x20	; 32
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e0       	ldi	r20, 0x00	; 0
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	28 1b       	sub	r18, r24
     e6c:	39 0b       	sbc	r19, r25
     e6e:	4a 0b       	sbc	r20, r26
     e70:	5b 0b       	sbc	r21, r27
     e72:	04 c0       	rjmp	.+8      	; 0xe7c <__clzsi2+0x7e>
     e74:	16 95       	lsr	r17
     e76:	07 95       	ror	r16
     e78:	f7 94       	ror	r15
     e7a:	e7 94       	ror	r14
     e7c:	8a 95       	dec	r24
     e7e:	d2 f7       	brpl	.-12     	; 0xe74 <__clzsi2+0x76>
     e80:	f7 01       	movw	r30, r14
     e82:	e8 59       	subi	r30, 0x98	; 152
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	80 81       	ld	r24, Z
     e88:	28 1b       	sub	r18, r24
     e8a:	31 09       	sbc	r19, r1
     e8c:	41 09       	sbc	r20, r1
     e8e:	51 09       	sbc	r21, r1
     e90:	c9 01       	movw	r24, r18
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	08 95       	ret

00000e9c <__pack_f>:
     e9c:	df 92       	push	r13
     e9e:	ef 92       	push	r14
     ea0:	ff 92       	push	r15
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	fc 01       	movw	r30, r24
     ea8:	e4 80       	ldd	r14, Z+4	; 0x04
     eaa:	f5 80       	ldd	r15, Z+5	; 0x05
     eac:	06 81       	ldd	r16, Z+6	; 0x06
     eae:	17 81       	ldd	r17, Z+7	; 0x07
     eb0:	d1 80       	ldd	r13, Z+1	; 0x01
     eb2:	80 81       	ld	r24, Z
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	48 f4       	brcc	.+18     	; 0xeca <__pack_f+0x2e>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	a0 e1       	ldi	r26, 0x10	; 16
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e8 2a       	or	r14, r24
     ec2:	f9 2a       	or	r15, r25
     ec4:	0a 2b       	or	r16, r26
     ec6:	1b 2b       	or	r17, r27
     ec8:	a5 c0       	rjmp	.+330    	; 0x1014 <__pack_f+0x178>
     eca:	84 30       	cpi	r24, 0x04	; 4
     ecc:	09 f4       	brne	.+2      	; 0xed0 <__pack_f+0x34>
     ece:	9f c0       	rjmp	.+318    	; 0x100e <__pack_f+0x172>
     ed0:	82 30       	cpi	r24, 0x02	; 2
     ed2:	21 f4       	brne	.+8      	; 0xedc <__pack_f+0x40>
     ed4:	ee 24       	eor	r14, r14
     ed6:	ff 24       	eor	r15, r15
     ed8:	87 01       	movw	r16, r14
     eda:	05 c0       	rjmp	.+10     	; 0xee6 <__pack_f+0x4a>
     edc:	e1 14       	cp	r14, r1
     ede:	f1 04       	cpc	r15, r1
     ee0:	01 05       	cpc	r16, r1
     ee2:	11 05       	cpc	r17, r1
     ee4:	19 f4       	brne	.+6      	; 0xeec <__pack_f+0x50>
     ee6:	e0 e0       	ldi	r30, 0x00	; 0
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	96 c0       	rjmp	.+300    	; 0x1018 <__pack_f+0x17c>
     eec:	62 81       	ldd	r22, Z+2	; 0x02
     eee:	73 81       	ldd	r23, Z+3	; 0x03
     ef0:	9f ef       	ldi	r25, 0xFF	; 255
     ef2:	62 38       	cpi	r22, 0x82	; 130
     ef4:	79 07       	cpc	r23, r25
     ef6:	0c f0       	brlt	.+2      	; 0xefa <__pack_f+0x5e>
     ef8:	5b c0       	rjmp	.+182    	; 0xfb0 <__pack_f+0x114>
     efa:	22 e8       	ldi	r18, 0x82	; 130
     efc:	3f ef       	ldi	r19, 0xFF	; 255
     efe:	26 1b       	sub	r18, r22
     f00:	37 0b       	sbc	r19, r23
     f02:	2a 31       	cpi	r18, 0x1A	; 26
     f04:	31 05       	cpc	r19, r1
     f06:	2c f0       	brlt	.+10     	; 0xf12 <__pack_f+0x76>
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	2a c0       	rjmp	.+84     	; 0xf66 <__pack_f+0xca>
     f12:	b8 01       	movw	r22, r16
     f14:	a7 01       	movw	r20, r14
     f16:	02 2e       	mov	r0, r18
     f18:	04 c0       	rjmp	.+8      	; 0xf22 <__pack_f+0x86>
     f1a:	76 95       	lsr	r23
     f1c:	67 95       	ror	r22
     f1e:	57 95       	ror	r21
     f20:	47 95       	ror	r20
     f22:	0a 94       	dec	r0
     f24:	d2 f7       	brpl	.-12     	; 0xf1a <__pack_f+0x7e>
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	a0 e0       	ldi	r26, 0x00	; 0
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	04 c0       	rjmp	.+8      	; 0xf38 <__pack_f+0x9c>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	aa 1f       	adc	r26, r26
     f36:	bb 1f       	adc	r27, r27
     f38:	2a 95       	dec	r18
     f3a:	d2 f7       	brpl	.-12     	; 0xf30 <__pack_f+0x94>
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	a1 09       	sbc	r26, r1
     f40:	b1 09       	sbc	r27, r1
     f42:	8e 21       	and	r24, r14
     f44:	9f 21       	and	r25, r15
     f46:	a0 23       	and	r26, r16
     f48:	b1 23       	and	r27, r17
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	a1 05       	cpc	r26, r1
     f4e:	b1 05       	cpc	r27, r1
     f50:	21 f0       	breq	.+8      	; 0xf5a <__pack_f+0xbe>
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a0 e0       	ldi	r26, 0x00	; 0
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	9a 01       	movw	r18, r20
     f5c:	ab 01       	movw	r20, r22
     f5e:	28 2b       	or	r18, r24
     f60:	39 2b       	or	r19, r25
     f62:	4a 2b       	or	r20, r26
     f64:	5b 2b       	or	r21, r27
     f66:	da 01       	movw	r26, r20
     f68:	c9 01       	movw	r24, r18
     f6a:	8f 77       	andi	r24, 0x7F	; 127
     f6c:	90 70       	andi	r25, 0x00	; 0
     f6e:	a0 70       	andi	r26, 0x00	; 0
     f70:	b0 70       	andi	r27, 0x00	; 0
     f72:	80 34       	cpi	r24, 0x40	; 64
     f74:	91 05       	cpc	r25, r1
     f76:	a1 05       	cpc	r26, r1
     f78:	b1 05       	cpc	r27, r1
     f7a:	39 f4       	brne	.+14     	; 0xf8a <__pack_f+0xee>
     f7c:	27 ff       	sbrs	r18, 7
     f7e:	09 c0       	rjmp	.+18     	; 0xf92 <__pack_f+0xf6>
     f80:	20 5c       	subi	r18, 0xC0	; 192
     f82:	3f 4f       	sbci	r19, 0xFF	; 255
     f84:	4f 4f       	sbci	r20, 0xFF	; 255
     f86:	5f 4f       	sbci	r21, 0xFF	; 255
     f88:	04 c0       	rjmp	.+8      	; 0xf92 <__pack_f+0xf6>
     f8a:	21 5c       	subi	r18, 0xC1	; 193
     f8c:	3f 4f       	sbci	r19, 0xFF	; 255
     f8e:	4f 4f       	sbci	r20, 0xFF	; 255
     f90:	5f 4f       	sbci	r21, 0xFF	; 255
     f92:	e0 e0       	ldi	r30, 0x00	; 0
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	20 30       	cpi	r18, 0x00	; 0
     f98:	a0 e0       	ldi	r26, 0x00	; 0
     f9a:	3a 07       	cpc	r19, r26
     f9c:	a0 e0       	ldi	r26, 0x00	; 0
     f9e:	4a 07       	cpc	r20, r26
     fa0:	a0 e4       	ldi	r26, 0x40	; 64
     fa2:	5a 07       	cpc	r21, r26
     fa4:	10 f0       	brcs	.+4      	; 0xfaa <__pack_f+0x10e>
     fa6:	e1 e0       	ldi	r30, 0x01	; 1
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	79 01       	movw	r14, r18
     fac:	8a 01       	movw	r16, r20
     fae:	27 c0       	rjmp	.+78     	; 0xffe <__pack_f+0x162>
     fb0:	60 38       	cpi	r22, 0x80	; 128
     fb2:	71 05       	cpc	r23, r1
     fb4:	64 f5       	brge	.+88     	; 0x100e <__pack_f+0x172>
     fb6:	fb 01       	movw	r30, r22
     fb8:	e1 58       	subi	r30, 0x81	; 129
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	d8 01       	movw	r26, r16
     fbe:	c7 01       	movw	r24, r14
     fc0:	8f 77       	andi	r24, 0x7F	; 127
     fc2:	90 70       	andi	r25, 0x00	; 0
     fc4:	a0 70       	andi	r26, 0x00	; 0
     fc6:	b0 70       	andi	r27, 0x00	; 0
     fc8:	80 34       	cpi	r24, 0x40	; 64
     fca:	91 05       	cpc	r25, r1
     fcc:	a1 05       	cpc	r26, r1
     fce:	b1 05       	cpc	r27, r1
     fd0:	39 f4       	brne	.+14     	; 0xfe0 <__pack_f+0x144>
     fd2:	e7 fe       	sbrs	r14, 7
     fd4:	0d c0       	rjmp	.+26     	; 0xff0 <__pack_f+0x154>
     fd6:	80 e4       	ldi	r24, 0x40	; 64
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a0 e0       	ldi	r26, 0x00	; 0
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <__pack_f+0x14c>
     fe0:	8f e3       	ldi	r24, 0x3F	; 63
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a0 e0       	ldi	r26, 0x00	; 0
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e8 0e       	add	r14, r24
     fea:	f9 1e       	adc	r15, r25
     fec:	0a 1f       	adc	r16, r26
     fee:	1b 1f       	adc	r17, r27
     ff0:	17 ff       	sbrs	r17, 7
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <__pack_f+0x162>
     ff4:	16 95       	lsr	r17
     ff6:	07 95       	ror	r16
     ff8:	f7 94       	ror	r15
     ffa:	e7 94       	ror	r14
     ffc:	31 96       	adiw	r30, 0x01	; 1
     ffe:	87 e0       	ldi	r24, 0x07	; 7
    1000:	16 95       	lsr	r17
    1002:	07 95       	ror	r16
    1004:	f7 94       	ror	r15
    1006:	e7 94       	ror	r14
    1008:	8a 95       	dec	r24
    100a:	d1 f7       	brne	.-12     	; 0x1000 <__pack_f+0x164>
    100c:	05 c0       	rjmp	.+10     	; 0x1018 <__pack_f+0x17c>
    100e:	ee 24       	eor	r14, r14
    1010:	ff 24       	eor	r15, r15
    1012:	87 01       	movw	r16, r14
    1014:	ef ef       	ldi	r30, 0xFF	; 255
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	6e 2f       	mov	r22, r30
    101a:	67 95       	ror	r22
    101c:	66 27       	eor	r22, r22
    101e:	67 95       	ror	r22
    1020:	90 2f       	mov	r25, r16
    1022:	9f 77       	andi	r25, 0x7F	; 127
    1024:	d7 94       	ror	r13
    1026:	dd 24       	eor	r13, r13
    1028:	d7 94       	ror	r13
    102a:	8e 2f       	mov	r24, r30
    102c:	86 95       	lsr	r24
    102e:	49 2f       	mov	r20, r25
    1030:	46 2b       	or	r20, r22
    1032:	58 2f       	mov	r21, r24
    1034:	5d 29       	or	r21, r13
    1036:	b7 01       	movw	r22, r14
    1038:	ca 01       	movw	r24, r20
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	df 90       	pop	r13
    1044:	08 95       	ret

00001046 <__unpack_f>:
    1046:	fc 01       	movw	r30, r24
    1048:	db 01       	movw	r26, r22
    104a:	40 81       	ld	r20, Z
    104c:	51 81       	ldd	r21, Z+1	; 0x01
    104e:	22 81       	ldd	r18, Z+2	; 0x02
    1050:	62 2f       	mov	r22, r18
    1052:	6f 77       	andi	r22, 0x7F	; 127
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	22 1f       	adc	r18, r18
    1058:	22 27       	eor	r18, r18
    105a:	22 1f       	adc	r18, r18
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	89 2f       	mov	r24, r25
    1060:	88 0f       	add	r24, r24
    1062:	82 2b       	or	r24, r18
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	99 1f       	adc	r25, r25
    106a:	99 27       	eor	r25, r25
    106c:	99 1f       	adc	r25, r25
    106e:	11 96       	adiw	r26, 0x01	; 1
    1070:	9c 93       	st	X, r25
    1072:	11 97       	sbiw	r26, 0x01	; 1
    1074:	21 15       	cp	r18, r1
    1076:	31 05       	cpc	r19, r1
    1078:	a9 f5       	brne	.+106    	; 0x10e4 <__unpack_f+0x9e>
    107a:	41 15       	cp	r20, r1
    107c:	51 05       	cpc	r21, r1
    107e:	61 05       	cpc	r22, r1
    1080:	71 05       	cpc	r23, r1
    1082:	11 f4       	brne	.+4      	; 0x1088 <__unpack_f+0x42>
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	37 c0       	rjmp	.+110    	; 0x10f6 <__unpack_f+0xb0>
    1088:	82 e8       	ldi	r24, 0x82	; 130
    108a:	9f ef       	ldi	r25, 0xFF	; 255
    108c:	13 96       	adiw	r26, 0x03	; 3
    108e:	9c 93       	st	X, r25
    1090:	8e 93       	st	-X, r24
    1092:	12 97       	sbiw	r26, 0x02	; 2
    1094:	9a 01       	movw	r18, r20
    1096:	ab 01       	movw	r20, r22
    1098:	67 e0       	ldi	r22, 0x07	; 7
    109a:	22 0f       	add	r18, r18
    109c:	33 1f       	adc	r19, r19
    109e:	44 1f       	adc	r20, r20
    10a0:	55 1f       	adc	r21, r21
    10a2:	6a 95       	dec	r22
    10a4:	d1 f7       	brne	.-12     	; 0x109a <__unpack_f+0x54>
    10a6:	83 e0       	ldi	r24, 0x03	; 3
    10a8:	8c 93       	st	X, r24
    10aa:	0d c0       	rjmp	.+26     	; 0x10c6 <__unpack_f+0x80>
    10ac:	22 0f       	add	r18, r18
    10ae:	33 1f       	adc	r19, r19
    10b0:	44 1f       	adc	r20, r20
    10b2:	55 1f       	adc	r21, r21
    10b4:	12 96       	adiw	r26, 0x02	; 2
    10b6:	8d 91       	ld	r24, X+
    10b8:	9c 91       	ld	r25, X
    10ba:	13 97       	sbiw	r26, 0x03	; 3
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	13 96       	adiw	r26, 0x03	; 3
    10c0:	9c 93       	st	X, r25
    10c2:	8e 93       	st	-X, r24
    10c4:	12 97       	sbiw	r26, 0x02	; 2
    10c6:	20 30       	cpi	r18, 0x00	; 0
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	38 07       	cpc	r19, r24
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	48 07       	cpc	r20, r24
    10d0:	80 e4       	ldi	r24, 0x40	; 64
    10d2:	58 07       	cpc	r21, r24
    10d4:	58 f3       	brcs	.-42     	; 0x10ac <__unpack_f+0x66>
    10d6:	14 96       	adiw	r26, 0x04	; 4
    10d8:	2d 93       	st	X+, r18
    10da:	3d 93       	st	X+, r19
    10dc:	4d 93       	st	X+, r20
    10de:	5c 93       	st	X, r21
    10e0:	17 97       	sbiw	r26, 0x07	; 7
    10e2:	08 95       	ret
    10e4:	2f 3f       	cpi	r18, 0xFF	; 255
    10e6:	31 05       	cpc	r19, r1
    10e8:	79 f4       	brne	.+30     	; 0x1108 <__unpack_f+0xc2>
    10ea:	41 15       	cp	r20, r1
    10ec:	51 05       	cpc	r21, r1
    10ee:	61 05       	cpc	r22, r1
    10f0:	71 05       	cpc	r23, r1
    10f2:	19 f4       	brne	.+6      	; 0x10fa <__unpack_f+0xb4>
    10f4:	84 e0       	ldi	r24, 0x04	; 4
    10f6:	8c 93       	st	X, r24
    10f8:	08 95       	ret
    10fa:	64 ff       	sbrs	r22, 4
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <__unpack_f+0xbe>
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	8c 93       	st	X, r24
    1102:	12 c0       	rjmp	.+36     	; 0x1128 <__unpack_f+0xe2>
    1104:	1c 92       	st	X, r1
    1106:	10 c0       	rjmp	.+32     	; 0x1128 <__unpack_f+0xe2>
    1108:	2f 57       	subi	r18, 0x7F	; 127
    110a:	30 40       	sbci	r19, 0x00	; 0
    110c:	13 96       	adiw	r26, 0x03	; 3
    110e:	3c 93       	st	X, r19
    1110:	2e 93       	st	-X, r18
    1112:	12 97       	sbiw	r26, 0x02	; 2
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	8c 93       	st	X, r24
    1118:	87 e0       	ldi	r24, 0x07	; 7
    111a:	44 0f       	add	r20, r20
    111c:	55 1f       	adc	r21, r21
    111e:	66 1f       	adc	r22, r22
    1120:	77 1f       	adc	r23, r23
    1122:	8a 95       	dec	r24
    1124:	d1 f7       	brne	.-12     	; 0x111a <__unpack_f+0xd4>
    1126:	70 64       	ori	r23, 0x40	; 64
    1128:	14 96       	adiw	r26, 0x04	; 4
    112a:	4d 93       	st	X+, r20
    112c:	5d 93       	st	X+, r21
    112e:	6d 93       	st	X+, r22
    1130:	7c 93       	st	X, r23
    1132:	17 97       	sbiw	r26, 0x07	; 7
    1134:	08 95       	ret

00001136 <__fpcmp_parts_f>:
    1136:	1f 93       	push	r17
    1138:	dc 01       	movw	r26, r24
    113a:	fb 01       	movw	r30, r22
    113c:	9c 91       	ld	r25, X
    113e:	92 30       	cpi	r25, 0x02	; 2
    1140:	08 f4       	brcc	.+2      	; 0x1144 <__fpcmp_parts_f+0xe>
    1142:	47 c0       	rjmp	.+142    	; 0x11d2 <__fpcmp_parts_f+0x9c>
    1144:	80 81       	ld	r24, Z
    1146:	82 30       	cpi	r24, 0x02	; 2
    1148:	08 f4       	brcc	.+2      	; 0x114c <__fpcmp_parts_f+0x16>
    114a:	43 c0       	rjmp	.+134    	; 0x11d2 <__fpcmp_parts_f+0x9c>
    114c:	94 30       	cpi	r25, 0x04	; 4
    114e:	51 f4       	brne	.+20     	; 0x1164 <__fpcmp_parts_f+0x2e>
    1150:	11 96       	adiw	r26, 0x01	; 1
    1152:	1c 91       	ld	r17, X
    1154:	84 30       	cpi	r24, 0x04	; 4
    1156:	99 f5       	brne	.+102    	; 0x11be <__fpcmp_parts_f+0x88>
    1158:	81 81       	ldd	r24, Z+1	; 0x01
    115a:	68 2f       	mov	r22, r24
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	61 1b       	sub	r22, r17
    1160:	71 09       	sbc	r23, r1
    1162:	3f c0       	rjmp	.+126    	; 0x11e2 <__fpcmp_parts_f+0xac>
    1164:	84 30       	cpi	r24, 0x04	; 4
    1166:	21 f0       	breq	.+8      	; 0x1170 <__fpcmp_parts_f+0x3a>
    1168:	92 30       	cpi	r25, 0x02	; 2
    116a:	31 f4       	brne	.+12     	; 0x1178 <__fpcmp_parts_f+0x42>
    116c:	82 30       	cpi	r24, 0x02	; 2
    116e:	b9 f1       	breq	.+110    	; 0x11de <__fpcmp_parts_f+0xa8>
    1170:	81 81       	ldd	r24, Z+1	; 0x01
    1172:	88 23       	and	r24, r24
    1174:	89 f1       	breq	.+98     	; 0x11d8 <__fpcmp_parts_f+0xa2>
    1176:	2d c0       	rjmp	.+90     	; 0x11d2 <__fpcmp_parts_f+0x9c>
    1178:	11 96       	adiw	r26, 0x01	; 1
    117a:	1c 91       	ld	r17, X
    117c:	11 97       	sbiw	r26, 0x01	; 1
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	f1 f0       	breq	.+60     	; 0x11be <__fpcmp_parts_f+0x88>
    1182:	81 81       	ldd	r24, Z+1	; 0x01
    1184:	18 17       	cp	r17, r24
    1186:	d9 f4       	brne	.+54     	; 0x11be <__fpcmp_parts_f+0x88>
    1188:	12 96       	adiw	r26, 0x02	; 2
    118a:	2d 91       	ld	r18, X+
    118c:	3c 91       	ld	r19, X
    118e:	13 97       	sbiw	r26, 0x03	; 3
    1190:	82 81       	ldd	r24, Z+2	; 0x02
    1192:	93 81       	ldd	r25, Z+3	; 0x03
    1194:	82 17       	cp	r24, r18
    1196:	93 07       	cpc	r25, r19
    1198:	94 f0       	brlt	.+36     	; 0x11be <__fpcmp_parts_f+0x88>
    119a:	28 17       	cp	r18, r24
    119c:	39 07       	cpc	r19, r25
    119e:	bc f0       	brlt	.+46     	; 0x11ce <__fpcmp_parts_f+0x98>
    11a0:	14 96       	adiw	r26, 0x04	; 4
    11a2:	8d 91       	ld	r24, X+
    11a4:	9d 91       	ld	r25, X+
    11a6:	0d 90       	ld	r0, X+
    11a8:	bc 91       	ld	r27, X
    11aa:	a0 2d       	mov	r26, r0
    11ac:	24 81       	ldd	r18, Z+4	; 0x04
    11ae:	35 81       	ldd	r19, Z+5	; 0x05
    11b0:	46 81       	ldd	r20, Z+6	; 0x06
    11b2:	57 81       	ldd	r21, Z+7	; 0x07
    11b4:	28 17       	cp	r18, r24
    11b6:	39 07       	cpc	r19, r25
    11b8:	4a 07       	cpc	r20, r26
    11ba:	5b 07       	cpc	r21, r27
    11bc:	18 f4       	brcc	.+6      	; 0x11c4 <__fpcmp_parts_f+0x8e>
    11be:	11 23       	and	r17, r17
    11c0:	41 f0       	breq	.+16     	; 0x11d2 <__fpcmp_parts_f+0x9c>
    11c2:	0a c0       	rjmp	.+20     	; 0x11d8 <__fpcmp_parts_f+0xa2>
    11c4:	82 17       	cp	r24, r18
    11c6:	93 07       	cpc	r25, r19
    11c8:	a4 07       	cpc	r26, r20
    11ca:	b5 07       	cpc	r27, r21
    11cc:	40 f4       	brcc	.+16     	; 0x11de <__fpcmp_parts_f+0xa8>
    11ce:	11 23       	and	r17, r17
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <__fpcmp_parts_f+0xa2>
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	05 c0       	rjmp	.+10     	; 0x11e2 <__fpcmp_parts_f+0xac>
    11d8:	6f ef       	ldi	r22, 0xFF	; 255
    11da:	7f ef       	ldi	r23, 0xFF	; 255
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <__fpcmp_parts_f+0xac>
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	cb 01       	movw	r24, r22
    11e4:	1f 91       	pop	r17
    11e6:	08 95       	ret

000011e8 <GLCD_Command>:
#define RST					PC5

#define TotalPage			8

void GLCD_Command(char Command)		/* GLCD command function */
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	e1 97       	sbiw	r28, 0x31	; 49
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	89 ab       	std	Y+49, r24	; 0x31
	Data_Port = Command;			/* Copy command on data pin */
    11fe:	eb e3       	ldi	r30, 0x3B	; 59
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	89 a9       	ldd	r24, Y+49	; 0x31
    1204:	80 83       	st	Z, r24
	Command_Port &= ~(1 << RS);		/* Make RS LOW to select command register */
    1206:	a5 e3       	ldi	r26, 0x35	; 53
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e5 e3       	ldi	r30, 0x35	; 53
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	8e 7f       	andi	r24, 0xFE	; 254
    1212:	8c 93       	st	X, r24
	Command_Port &= ~(1 << RW);		/* Make RW LOW to select write operation */
    1214:	a5 e3       	ldi	r26, 0x35	; 53
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e5 e3       	ldi	r30, 0x35	; 53
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	8d 7f       	andi	r24, 0xFD	; 253
    1220:	8c 93       	st	X, r24
	Command_Port |=  (1 << EN);		/* Make HIGH to LOW transition on Enable pin */
    1222:	a5 e3       	ldi	r26, 0x35	; 53
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e5 e3       	ldi	r30, 0x35	; 53
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	84 60       	ori	r24, 0x04	; 4
    122e:	8c 93       	st	X, r24
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	a0 ea       	ldi	r26, 0xA0	; 160
    1236:	b0 e4       	ldi	r27, 0x40	; 64
    1238:	8d a7       	std	Y+45, r24	; 0x2d
    123a:	9e a7       	std	Y+46, r25	; 0x2e
    123c:	af a7       	std	Y+47, r26	; 0x2f
    123e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1240:	6d a5       	ldd	r22, Y+45	; 0x2d
    1242:	7e a5       	ldd	r23, Y+46	; 0x2e
    1244:	8f a5       	ldd	r24, Y+47	; 0x2f
    1246:	98 a9       	ldd	r25, Y+48	; 0x30
    1248:	2b ea       	ldi	r18, 0xAB	; 171
    124a:	3a ea       	ldi	r19, 0xAA	; 170
    124c:	4a e2       	ldi	r20, 0x2A	; 42
    124e:	50 e4       	ldi	r21, 0x40	; 64
    1250:	0e 94 17 04 	call	0x82e	; 0x82e <__mulsf3>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	89 a7       	std	Y+41, r24	; 0x29
    125a:	9a a7       	std	Y+42, r25	; 0x2a
    125c:	ab a7       	std	Y+43, r26	; 0x2b
    125e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1260:	69 a5       	ldd	r22, Y+41	; 0x29
    1262:	7a a5       	ldd	r23, Y+42	; 0x2a
    1264:	8b a5       	ldd	r24, Y+43	; 0x2b
    1266:	9c a5       	ldd	r25, Y+44	; 0x2c
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e8       	ldi	r20, 0x80	; 128
    126e:	5f e3       	ldi	r21, 0x3F	; 63
    1270:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__ltsf2>
    1274:	88 23       	and	r24, r24
    1276:	1c f4       	brge	.+6      	; 0x127e <GLCD_Command+0x96>
		__ticks = 1;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	88 a7       	std	Y+40, r24	; 0x28
    127c:	91 c0       	rjmp	.+290    	; 0x13a0 <GLCD_Command+0x1b8>
	else if (__tmp > 255)
    127e:	69 a5       	ldd	r22, Y+41	; 0x29
    1280:	7a a5       	ldd	r23, Y+42	; 0x2a
    1282:	8b a5       	ldd	r24, Y+43	; 0x2b
    1284:	9c a5       	ldd	r25, Y+44	; 0x2c
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	4f e7       	ldi	r20, 0x7F	; 127
    128c:	53 e4       	ldi	r21, 0x43	; 67
    128e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__gtsf2>
    1292:	18 16       	cp	r1, r24
    1294:	0c f0       	brlt	.+2      	; 0x1298 <GLCD_Command+0xb0>
    1296:	7b c0       	rjmp	.+246    	; 0x138e <GLCD_Command+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1298:	6d a5       	ldd	r22, Y+45	; 0x2d
    129a:	7e a5       	ldd	r23, Y+46	; 0x2e
    129c:	8f a5       	ldd	r24, Y+47	; 0x2f
    129e:	98 a9       	ldd	r25, Y+48	; 0x30
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	4a e7       	ldi	r20, 0x7A	; 122
    12a6:	54 e4       	ldi	r21, 0x44	; 68
    12a8:	0e 94 11 05 	call	0xa22	; 0xa22 <__divsf3>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	8c a3       	std	Y+36, r24	; 0x24
    12b2:	9d a3       	std	Y+37, r25	; 0x25
    12b4:	ae a3       	std	Y+38, r26	; 0x26
    12b6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b8:	6c a1       	ldd	r22, Y+36	; 0x24
    12ba:	7d a1       	ldd	r23, Y+37	; 0x25
    12bc:	8e a1       	ldd	r24, Y+38	; 0x26
    12be:	9f a1       	ldd	r25, Y+39	; 0x27
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	4a ef       	ldi	r20, 0xFA	; 250
    12c6:	54 e4       	ldi	r21, 0x44	; 68
    12c8:	0e 94 17 04 	call	0x82e	; 0x82e <__mulsf3>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	88 a3       	std	Y+32, r24	; 0x20
    12d2:	99 a3       	std	Y+33, r25	; 0x21
    12d4:	aa a3       	std	Y+34, r26	; 0x22
    12d6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    12d8:	68 a1       	ldd	r22, Y+32	; 0x20
    12da:	79 a1       	ldd	r23, Y+33	; 0x21
    12dc:	8a a1       	ldd	r24, Y+34	; 0x22
    12de:	9b a1       	ldd	r25, Y+35	; 0x23
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e8       	ldi	r20, 0x80	; 128
    12e6:	5f e3       	ldi	r21, 0x3F	; 63
    12e8:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__ltsf2>
    12ec:	88 23       	and	r24, r24
    12ee:	2c f4       	brge	.+10     	; 0x12fa <GLCD_Command+0x112>
		__ticks = 1;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9f 8f       	std	Y+31, r25	; 0x1f
    12f6:	8e 8f       	std	Y+30, r24	; 0x1e
    12f8:	3f c0       	rjmp	.+126    	; 0x1378 <GLCD_Command+0x190>
	else if (__tmp > 65535)
    12fa:	68 a1       	ldd	r22, Y+32	; 0x20
    12fc:	79 a1       	ldd	r23, Y+33	; 0x21
    12fe:	8a a1       	ldd	r24, Y+34	; 0x22
    1300:	9b a1       	ldd	r25, Y+35	; 0x23
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	3f ef       	ldi	r19, 0xFF	; 255
    1306:	4f e7       	ldi	r20, 0x7F	; 127
    1308:	57 e4       	ldi	r21, 0x47	; 71
    130a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__gtsf2>
    130e:	18 16       	cp	r1, r24
    1310:	4c f5       	brge	.+82     	; 0x1364 <GLCD_Command+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1312:	6c a1       	ldd	r22, Y+36	; 0x24
    1314:	7d a1       	ldd	r23, Y+37	; 0x25
    1316:	8e a1       	ldd	r24, Y+38	; 0x26
    1318:	9f a1       	ldd	r25, Y+39	; 0x27
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e2       	ldi	r20, 0x20	; 32
    1320:	51 e4       	ldi	r21, 0x41	; 65
    1322:	0e 94 17 04 	call	0x82e	; 0x82e <__mulsf3>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	bc 01       	movw	r22, r24
    132c:	cd 01       	movw	r24, r26
    132e:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	9f 8f       	std	Y+31, r25	; 0x1f
    1338:	8e 8f       	std	Y+30, r24	; 0x1e
    133a:	0f c0       	rjmp	.+30     	; 0x135a <GLCD_Command+0x172>
    133c:	88 ec       	ldi	r24, 0xC8	; 200
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	9d 8f       	std	Y+29, r25	; 0x1d
    1342:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1344:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1346:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <GLCD_Command+0x160>
    134c:	9d 8f       	std	Y+29, r25	; 0x1d
    134e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1350:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1352:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	9f 8f       	std	Y+31, r25	; 0x1f
    1358:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    135c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	69 f7       	brne	.-38     	; 0x133c <GLCD_Command+0x154>
    1362:	24 c0       	rjmp	.+72     	; 0x13ac <GLCD_Command+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1364:	68 a1       	ldd	r22, Y+32	; 0x20
    1366:	79 a1       	ldd	r23, Y+33	; 0x21
    1368:	8a a1       	ldd	r24, Y+34	; 0x22
    136a:	9b a1       	ldd	r25, Y+35	; 0x23
    136c:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	9f 8f       	std	Y+31, r25	; 0x1f
    1376:	8e 8f       	std	Y+30, r24	; 0x1e
    1378:	8e 8d       	ldd	r24, Y+30	; 0x1e
    137a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    137c:	9b 8f       	std	Y+27, r25	; 0x1b
    137e:	8a 8f       	std	Y+26, r24	; 0x1a
    1380:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1382:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	f1 f7       	brne	.-4      	; 0x1384 <GLCD_Command+0x19c>
    1388:	9b 8f       	std	Y+27, r25	; 0x1b
    138a:	8a 8f       	std	Y+26, r24	; 0x1a
    138c:	0f c0       	rjmp	.+30     	; 0x13ac <GLCD_Command+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    138e:	69 a5       	ldd	r22, Y+41	; 0x29
    1390:	7a a5       	ldd	r23, Y+42	; 0x2a
    1392:	8b a5       	ldd	r24, Y+43	; 0x2b
    1394:	9c a5       	ldd	r25, Y+44	; 0x2c
    1396:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	88 a7       	std	Y+40, r24	; 0x28
    13a0:	88 a5       	ldd	r24, Y+40	; 0x28
    13a2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13a4:	89 8d       	ldd	r24, Y+25	; 0x19
    13a6:	8a 95       	dec	r24
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <GLCD_Command+0x1be>
    13aa:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	Command_Port &= ~(1 << EN);
    13ac:	a5 e3       	ldi	r26, 0x35	; 53
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e5 e3       	ldi	r30, 0x35	; 53
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8b 7f       	andi	r24, 0xFB	; 251
    13b8:	8c 93       	st	X, r24
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a0 ea       	ldi	r26, 0xA0	; 160
    13c0:	b0 e4       	ldi	r27, 0x40	; 64
    13c2:	8d 8b       	std	Y+21, r24	; 0x15
    13c4:	9e 8b       	std	Y+22, r25	; 0x16
    13c6:	af 8b       	std	Y+23, r26	; 0x17
    13c8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    13ca:	6d 89       	ldd	r22, Y+21	; 0x15
    13cc:	7e 89       	ldd	r23, Y+22	; 0x16
    13ce:	8f 89       	ldd	r24, Y+23	; 0x17
    13d0:	98 8d       	ldd	r25, Y+24	; 0x18
    13d2:	2b ea       	ldi	r18, 0xAB	; 171
    13d4:	3a ea       	ldi	r19, 0xAA	; 170
    13d6:	4a e2       	ldi	r20, 0x2A	; 42
    13d8:	50 e4       	ldi	r21, 0x40	; 64
    13da:	0e 94 17 04 	call	0x82e	; 0x82e <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	89 8b       	std	Y+17, r24	; 0x11
    13e4:	9a 8b       	std	Y+18, r25	; 0x12
    13e6:	ab 8b       	std	Y+19, r26	; 0x13
    13e8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    13ea:	69 89       	ldd	r22, Y+17	; 0x11
    13ec:	7a 89       	ldd	r23, Y+18	; 0x12
    13ee:	8b 89       	ldd	r24, Y+19	; 0x13
    13f0:	9c 89       	ldd	r25, Y+20	; 0x14
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e8       	ldi	r20, 0x80	; 128
    13f8:	5f e3       	ldi	r21, 0x3F	; 63
    13fa:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__ltsf2>
    13fe:	88 23       	and	r24, r24
    1400:	1c f4       	brge	.+6      	; 0x1408 <GLCD_Command+0x220>
		__ticks = 1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	88 8b       	std	Y+16, r24	; 0x10
    1406:	91 c0       	rjmp	.+290    	; 0x152a <GLCD_Command+0x342>
	else if (__tmp > 255)
    1408:	69 89       	ldd	r22, Y+17	; 0x11
    140a:	7a 89       	ldd	r23, Y+18	; 0x12
    140c:	8b 89       	ldd	r24, Y+19	; 0x13
    140e:	9c 89       	ldd	r25, Y+20	; 0x14
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4f e7       	ldi	r20, 0x7F	; 127
    1416:	53 e4       	ldi	r21, 0x43	; 67
    1418:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__gtsf2>
    141c:	18 16       	cp	r1, r24
    141e:	0c f0       	brlt	.+2      	; 0x1422 <GLCD_Command+0x23a>
    1420:	7b c0       	rjmp	.+246    	; 0x1518 <GLCD_Command+0x330>
	{
		_delay_ms(__us / 1000.0);
    1422:	6d 89       	ldd	r22, Y+21	; 0x15
    1424:	7e 89       	ldd	r23, Y+22	; 0x16
    1426:	8f 89       	ldd	r24, Y+23	; 0x17
    1428:	98 8d       	ldd	r25, Y+24	; 0x18
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a e7       	ldi	r20, 0x7A	; 122
    1430:	54 e4       	ldi	r21, 0x44	; 68
    1432:	0e 94 11 05 	call	0xa22	; 0xa22 <__divsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	8c 87       	std	Y+12, r24	; 0x0c
    143c:	9d 87       	std	Y+13, r25	; 0x0d
    143e:	ae 87       	std	Y+14, r26	; 0x0e
    1440:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1442:	6c 85       	ldd	r22, Y+12	; 0x0c
    1444:	7d 85       	ldd	r23, Y+13	; 0x0d
    1446:	8e 85       	ldd	r24, Y+14	; 0x0e
    1448:	9f 85       	ldd	r25, Y+15	; 0x0f
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	4a ef       	ldi	r20, 0xFA	; 250
    1450:	54 e4       	ldi	r21, 0x44	; 68
    1452:	0e 94 17 04 	call	0x82e	; 0x82e <__mulsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	88 87       	std	Y+8, r24	; 0x08
    145c:	99 87       	std	Y+9, r25	; 0x09
    145e:	aa 87       	std	Y+10, r26	; 0x0a
    1460:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1462:	68 85       	ldd	r22, Y+8	; 0x08
    1464:	79 85       	ldd	r23, Y+9	; 0x09
    1466:	8a 85       	ldd	r24, Y+10	; 0x0a
    1468:	9b 85       	ldd	r25, Y+11	; 0x0b
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e8       	ldi	r20, 0x80	; 128
    1470:	5f e3       	ldi	r21, 0x3F	; 63
    1472:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__ltsf2>
    1476:	88 23       	and	r24, r24
    1478:	2c f4       	brge	.+10     	; 0x1484 <GLCD_Command+0x29c>
		__ticks = 1;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	9f 83       	std	Y+7, r25	; 0x07
    1480:	8e 83       	std	Y+6, r24	; 0x06
    1482:	3f c0       	rjmp	.+126    	; 0x1502 <GLCD_Command+0x31a>
	else if (__tmp > 65535)
    1484:	68 85       	ldd	r22, Y+8	; 0x08
    1486:	79 85       	ldd	r23, Y+9	; 0x09
    1488:	8a 85       	ldd	r24, Y+10	; 0x0a
    148a:	9b 85       	ldd	r25, Y+11	; 0x0b
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	3f ef       	ldi	r19, 0xFF	; 255
    1490:	4f e7       	ldi	r20, 0x7F	; 127
    1492:	57 e4       	ldi	r21, 0x47	; 71
    1494:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__gtsf2>
    1498:	18 16       	cp	r1, r24
    149a:	4c f5       	brge	.+82     	; 0x14ee <GLCD_Command+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    149c:	6c 85       	ldd	r22, Y+12	; 0x0c
    149e:	7d 85       	ldd	r23, Y+13	; 0x0d
    14a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    14a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e2       	ldi	r20, 0x20	; 32
    14aa:	51 e4       	ldi	r21, 0x41	; 65
    14ac:	0e 94 17 04 	call	0x82e	; 0x82e <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	bc 01       	movw	r22, r24
    14b6:	cd 01       	movw	r24, r26
    14b8:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	9f 83       	std	Y+7, r25	; 0x07
    14c2:	8e 83       	std	Y+6, r24	; 0x06
    14c4:	0f c0       	rjmp	.+30     	; 0x14e4 <GLCD_Command+0x2fc>
    14c6:	88 ec       	ldi	r24, 0xC8	; 200
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	9d 83       	std	Y+5, r25	; 0x05
    14cc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	9d 81       	ldd	r25, Y+5	; 0x05
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	f1 f7       	brne	.-4      	; 0x14d2 <GLCD_Command+0x2ea>
    14d6:	9d 83       	std	Y+5, r25	; 0x05
    14d8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14da:	8e 81       	ldd	r24, Y+6	; 0x06
    14dc:	9f 81       	ldd	r25, Y+7	; 0x07
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	9f 83       	std	Y+7, r25	; 0x07
    14e2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e4:	8e 81       	ldd	r24, Y+6	; 0x06
    14e6:	9f 81       	ldd	r25, Y+7	; 0x07
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	69 f7       	brne	.-38     	; 0x14c6 <GLCD_Command+0x2de>
    14ec:	24 c0       	rjmp	.+72     	; 0x1536 <GLCD_Command+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ee:	68 85       	ldd	r22, Y+8	; 0x08
    14f0:	79 85       	ldd	r23, Y+9	; 0x09
    14f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    14f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    14f6:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	9f 83       	std	Y+7, r25	; 0x07
    1500:	8e 83       	std	Y+6, r24	; 0x06
    1502:	8e 81       	ldd	r24, Y+6	; 0x06
    1504:	9f 81       	ldd	r25, Y+7	; 0x07
    1506:	9b 83       	std	Y+3, r25	; 0x03
    1508:	8a 83       	std	Y+2, r24	; 0x02
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	9b 81       	ldd	r25, Y+3	; 0x03
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	f1 f7       	brne	.-4      	; 0x150e <GLCD_Command+0x326>
    1512:	9b 83       	std	Y+3, r25	; 0x03
    1514:	8a 83       	std	Y+2, r24	; 0x02
    1516:	0f c0       	rjmp	.+30     	; 0x1536 <GLCD_Command+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1518:	69 89       	ldd	r22, Y+17	; 0x11
    151a:	7a 89       	ldd	r23, Y+18	; 0x12
    151c:	8b 89       	ldd	r24, Y+19	; 0x13
    151e:	9c 89       	ldd	r25, Y+20	; 0x14
    1520:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	88 8b       	std	Y+16, r24	; 0x10
    152a:	88 89       	ldd	r24, Y+16	; 0x10
    152c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	8a 95       	dec	r24
    1532:	f1 f7       	brne	.-4      	; 0x1530 <GLCD_Command+0x348>
    1534:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    1536:	e1 96       	adiw	r28, 0x31	; 49
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <GLCD_Data>:

void GLCD_Data(char Data)			/* GLCD data function */
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	e1 97       	sbiw	r28, 0x31	; 49
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	89 ab       	std	Y+49, r24	; 0x31
	Data_Port = Data;				/* Copy data on data pin */
    155e:	eb e3       	ldi	r30, 0x3B	; 59
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	89 a9       	ldd	r24, Y+49	; 0x31
    1564:	80 83       	st	Z, r24
	Command_Port |=  (1 << RS);		/* Make RS HIGH to select data register */
    1566:	a5 e3       	ldi	r26, 0x35	; 53
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e5 e3       	ldi	r30, 0x35	; 53
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	81 60       	ori	r24, 0x01	; 1
    1572:	8c 93       	st	X, r24
	Command_Port &= ~(1 << RW);		/* Make RW LOW to select write operation */
    1574:	a5 e3       	ldi	r26, 0x35	; 53
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e5 e3       	ldi	r30, 0x35	; 53
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	8d 7f       	andi	r24, 0xFD	; 253
    1580:	8c 93       	st	X, r24
	Command_Port |=  (1 << EN);		/* Make HIGH to LOW transition on Enable pin */
    1582:	a5 e3       	ldi	r26, 0x35	; 53
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e3       	ldi	r30, 0x35	; 53
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	84 60       	ori	r24, 0x04	; 4
    158e:	8c 93       	st	X, r24
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a0 ea       	ldi	r26, 0xA0	; 160
    1596:	b0 e4       	ldi	r27, 0x40	; 64
    1598:	8d a7       	std	Y+45, r24	; 0x2d
    159a:	9e a7       	std	Y+46, r25	; 0x2e
    159c:	af a7       	std	Y+47, r26	; 0x2f
    159e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15a0:	6d a5       	ldd	r22, Y+45	; 0x2d
    15a2:	7e a5       	ldd	r23, Y+46	; 0x2e
    15a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    15a6:	98 a9       	ldd	r25, Y+48	; 0x30
    15a8:	2b ea       	ldi	r18, 0xAB	; 171
    15aa:	3a ea       	ldi	r19, 0xAA	; 170
    15ac:	4a e2       	ldi	r20, 0x2A	; 42
    15ae:	50 e4       	ldi	r21, 0x40	; 64
    15b0:	0e 94 17 04 	call	0x82e	; 0x82e <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	89 a7       	std	Y+41, r24	; 0x29
    15ba:	9a a7       	std	Y+42, r25	; 0x2a
    15bc:	ab a7       	std	Y+43, r26	; 0x2b
    15be:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    15c0:	69 a5       	ldd	r22, Y+41	; 0x29
    15c2:	7a a5       	ldd	r23, Y+42	; 0x2a
    15c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    15c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e8       	ldi	r20, 0x80	; 128
    15ce:	5f e3       	ldi	r21, 0x3F	; 63
    15d0:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__ltsf2>
    15d4:	88 23       	and	r24, r24
    15d6:	1c f4       	brge	.+6      	; 0x15de <GLCD_Data+0x96>
		__ticks = 1;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	88 a7       	std	Y+40, r24	; 0x28
    15dc:	91 c0       	rjmp	.+290    	; 0x1700 <GLCD_Data+0x1b8>
	else if (__tmp > 255)
    15de:	69 a5       	ldd	r22, Y+41	; 0x29
    15e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    15e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    15e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	4f e7       	ldi	r20, 0x7F	; 127
    15ec:	53 e4       	ldi	r21, 0x43	; 67
    15ee:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__gtsf2>
    15f2:	18 16       	cp	r1, r24
    15f4:	0c f0       	brlt	.+2      	; 0x15f8 <GLCD_Data+0xb0>
    15f6:	7b c0       	rjmp	.+246    	; 0x16ee <GLCD_Data+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    15f8:	6d a5       	ldd	r22, Y+45	; 0x2d
    15fa:	7e a5       	ldd	r23, Y+46	; 0x2e
    15fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    15fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	4a e7       	ldi	r20, 0x7A	; 122
    1606:	54 e4       	ldi	r21, 0x44	; 68
    1608:	0e 94 11 05 	call	0xa22	; 0xa22 <__divsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	8c a3       	std	Y+36, r24	; 0x24
    1612:	9d a3       	std	Y+37, r25	; 0x25
    1614:	ae a3       	std	Y+38, r26	; 0x26
    1616:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1618:	6c a1       	ldd	r22, Y+36	; 0x24
    161a:	7d a1       	ldd	r23, Y+37	; 0x25
    161c:	8e a1       	ldd	r24, Y+38	; 0x26
    161e:	9f a1       	ldd	r25, Y+39	; 0x27
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	4a ef       	ldi	r20, 0xFA	; 250
    1626:	54 e4       	ldi	r21, 0x44	; 68
    1628:	0e 94 17 04 	call	0x82e	; 0x82e <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	88 a3       	std	Y+32, r24	; 0x20
    1632:	99 a3       	std	Y+33, r25	; 0x21
    1634:	aa a3       	std	Y+34, r26	; 0x22
    1636:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1638:	68 a1       	ldd	r22, Y+32	; 0x20
    163a:	79 a1       	ldd	r23, Y+33	; 0x21
    163c:	8a a1       	ldd	r24, Y+34	; 0x22
    163e:	9b a1       	ldd	r25, Y+35	; 0x23
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e8       	ldi	r20, 0x80	; 128
    1646:	5f e3       	ldi	r21, 0x3F	; 63
    1648:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__ltsf2>
    164c:	88 23       	and	r24, r24
    164e:	2c f4       	brge	.+10     	; 0x165a <GLCD_Data+0x112>
		__ticks = 1;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	9f 8f       	std	Y+31, r25	; 0x1f
    1656:	8e 8f       	std	Y+30, r24	; 0x1e
    1658:	3f c0       	rjmp	.+126    	; 0x16d8 <GLCD_Data+0x190>
	else if (__tmp > 65535)
    165a:	68 a1       	ldd	r22, Y+32	; 0x20
    165c:	79 a1       	ldd	r23, Y+33	; 0x21
    165e:	8a a1       	ldd	r24, Y+34	; 0x22
    1660:	9b a1       	ldd	r25, Y+35	; 0x23
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	3f ef       	ldi	r19, 0xFF	; 255
    1666:	4f e7       	ldi	r20, 0x7F	; 127
    1668:	57 e4       	ldi	r21, 0x47	; 71
    166a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__gtsf2>
    166e:	18 16       	cp	r1, r24
    1670:	4c f5       	brge	.+82     	; 0x16c4 <GLCD_Data+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1672:	6c a1       	ldd	r22, Y+36	; 0x24
    1674:	7d a1       	ldd	r23, Y+37	; 0x25
    1676:	8e a1       	ldd	r24, Y+38	; 0x26
    1678:	9f a1       	ldd	r25, Y+39	; 0x27
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e2       	ldi	r20, 0x20	; 32
    1680:	51 e4       	ldi	r21, 0x41	; 65
    1682:	0e 94 17 04 	call	0x82e	; 0x82e <__mulsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	bc 01       	movw	r22, r24
    168c:	cd 01       	movw	r24, r26
    168e:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	9f 8f       	std	Y+31, r25	; 0x1f
    1698:	8e 8f       	std	Y+30, r24	; 0x1e
    169a:	0f c0       	rjmp	.+30     	; 0x16ba <GLCD_Data+0x172>
    169c:	88 ec       	ldi	r24, 0xC8	; 200
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	9d 8f       	std	Y+29, r25	; 0x1d
    16a2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16a6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <GLCD_Data+0x160>
    16ac:	9d 8f       	std	Y+29, r25	; 0x1d
    16ae:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	9f 8f       	std	Y+31, r25	; 0x1f
    16b8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16bc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	69 f7       	brne	.-38     	; 0x169c <GLCD_Data+0x154>
    16c2:	24 c0       	rjmp	.+72     	; 0x170c <GLCD_Data+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c4:	68 a1       	ldd	r22, Y+32	; 0x20
    16c6:	79 a1       	ldd	r23, Y+33	; 0x21
    16c8:	8a a1       	ldd	r24, Y+34	; 0x22
    16ca:	9b a1       	ldd	r25, Y+35	; 0x23
    16cc:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	9f 8f       	std	Y+31, r25	; 0x1f
    16d6:	8e 8f       	std	Y+30, r24	; 0x1e
    16d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    16dc:	9b 8f       	std	Y+27, r25	; 0x1b
    16de:	8a 8f       	std	Y+26, r24	; 0x1a
    16e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <GLCD_Data+0x19c>
    16e8:	9b 8f       	std	Y+27, r25	; 0x1b
    16ea:	8a 8f       	std	Y+26, r24	; 0x1a
    16ec:	0f c0       	rjmp	.+30     	; 0x170c <GLCD_Data+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16ee:	69 a5       	ldd	r22, Y+41	; 0x29
    16f0:	7a a5       	ldd	r23, Y+42	; 0x2a
    16f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    16f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    16f6:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	88 a7       	std	Y+40, r24	; 0x28
    1700:	88 a5       	ldd	r24, Y+40	; 0x28
    1702:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1704:	89 8d       	ldd	r24, Y+25	; 0x19
    1706:	8a 95       	dec	r24
    1708:	f1 f7       	brne	.-4      	; 0x1706 <GLCD_Data+0x1be>
    170a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	Command_Port &= ~(1 << EN);
    170c:	a5 e3       	ldi	r26, 0x35	; 53
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e5 e3       	ldi	r30, 0x35	; 53
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	8b 7f       	andi	r24, 0xFB	; 251
    1718:	8c 93       	st	X, r24
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a0 ea       	ldi	r26, 0xA0	; 160
    1720:	b0 e4       	ldi	r27, 0x40	; 64
    1722:	8d 8b       	std	Y+21, r24	; 0x15
    1724:	9e 8b       	std	Y+22, r25	; 0x16
    1726:	af 8b       	std	Y+23, r26	; 0x17
    1728:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    172a:	6d 89       	ldd	r22, Y+21	; 0x15
    172c:	7e 89       	ldd	r23, Y+22	; 0x16
    172e:	8f 89       	ldd	r24, Y+23	; 0x17
    1730:	98 8d       	ldd	r25, Y+24	; 0x18
    1732:	2b ea       	ldi	r18, 0xAB	; 171
    1734:	3a ea       	ldi	r19, 0xAA	; 170
    1736:	4a e2       	ldi	r20, 0x2A	; 42
    1738:	50 e4       	ldi	r21, 0x40	; 64
    173a:	0e 94 17 04 	call	0x82e	; 0x82e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	89 8b       	std	Y+17, r24	; 0x11
    1744:	9a 8b       	std	Y+18, r25	; 0x12
    1746:	ab 8b       	std	Y+19, r26	; 0x13
    1748:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    174a:	69 89       	ldd	r22, Y+17	; 0x11
    174c:	7a 89       	ldd	r23, Y+18	; 0x12
    174e:	8b 89       	ldd	r24, Y+19	; 0x13
    1750:	9c 89       	ldd	r25, Y+20	; 0x14
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e8       	ldi	r20, 0x80	; 128
    1758:	5f e3       	ldi	r21, 0x3F	; 63
    175a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__ltsf2>
    175e:	88 23       	and	r24, r24
    1760:	1c f4       	brge	.+6      	; 0x1768 <GLCD_Data+0x220>
		__ticks = 1;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	88 8b       	std	Y+16, r24	; 0x10
    1766:	91 c0       	rjmp	.+290    	; 0x188a <GLCD_Data+0x342>
	else if (__tmp > 255)
    1768:	69 89       	ldd	r22, Y+17	; 0x11
    176a:	7a 89       	ldd	r23, Y+18	; 0x12
    176c:	8b 89       	ldd	r24, Y+19	; 0x13
    176e:	9c 89       	ldd	r25, Y+20	; 0x14
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	4f e7       	ldi	r20, 0x7F	; 127
    1776:	53 e4       	ldi	r21, 0x43	; 67
    1778:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__gtsf2>
    177c:	18 16       	cp	r1, r24
    177e:	0c f0       	brlt	.+2      	; 0x1782 <GLCD_Data+0x23a>
    1780:	7b c0       	rjmp	.+246    	; 0x1878 <GLCD_Data+0x330>
	{
		_delay_ms(__us / 1000.0);
    1782:	6d 89       	ldd	r22, Y+21	; 0x15
    1784:	7e 89       	ldd	r23, Y+22	; 0x16
    1786:	8f 89       	ldd	r24, Y+23	; 0x17
    1788:	98 8d       	ldd	r25, Y+24	; 0x18
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	4a e7       	ldi	r20, 0x7A	; 122
    1790:	54 e4       	ldi	r21, 0x44	; 68
    1792:	0e 94 11 05 	call	0xa22	; 0xa22 <__divsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	8c 87       	std	Y+12, r24	; 0x0c
    179c:	9d 87       	std	Y+13, r25	; 0x0d
    179e:	ae 87       	std	Y+14, r26	; 0x0e
    17a0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    17a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    17a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    17a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	4a ef       	ldi	r20, 0xFA	; 250
    17b0:	54 e4       	ldi	r21, 0x44	; 68
    17b2:	0e 94 17 04 	call	0x82e	; 0x82e <__mulsf3>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	88 87       	std	Y+8, r24	; 0x08
    17bc:	99 87       	std	Y+9, r25	; 0x09
    17be:	aa 87       	std	Y+10, r26	; 0x0a
    17c0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    17c2:	68 85       	ldd	r22, Y+8	; 0x08
    17c4:	79 85       	ldd	r23, Y+9	; 0x09
    17c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    17c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e8       	ldi	r20, 0x80	; 128
    17d0:	5f e3       	ldi	r21, 0x3F	; 63
    17d2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__ltsf2>
    17d6:	88 23       	and	r24, r24
    17d8:	2c f4       	brge	.+10     	; 0x17e4 <GLCD_Data+0x29c>
		__ticks = 1;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	9f 83       	std	Y+7, r25	; 0x07
    17e0:	8e 83       	std	Y+6, r24	; 0x06
    17e2:	3f c0       	rjmp	.+126    	; 0x1862 <GLCD_Data+0x31a>
	else if (__tmp > 65535)
    17e4:	68 85       	ldd	r22, Y+8	; 0x08
    17e6:	79 85       	ldd	r23, Y+9	; 0x09
    17e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	3f ef       	ldi	r19, 0xFF	; 255
    17f0:	4f e7       	ldi	r20, 0x7F	; 127
    17f2:	57 e4       	ldi	r21, 0x47	; 71
    17f4:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__gtsf2>
    17f8:	18 16       	cp	r1, r24
    17fa:	4c f5       	brge	.+82     	; 0x184e <GLCD_Data+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    17fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    1800:	8e 85       	ldd	r24, Y+14	; 0x0e
    1802:	9f 85       	ldd	r25, Y+15	; 0x0f
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e2       	ldi	r20, 0x20	; 32
    180a:	51 e4       	ldi	r21, 0x41	; 65
    180c:	0e 94 17 04 	call	0x82e	; 0x82e <__mulsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	bc 01       	movw	r22, r24
    1816:	cd 01       	movw	r24, r26
    1818:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	9f 83       	std	Y+7, r25	; 0x07
    1822:	8e 83       	std	Y+6, r24	; 0x06
    1824:	0f c0       	rjmp	.+30     	; 0x1844 <GLCD_Data+0x2fc>
    1826:	88 ec       	ldi	r24, 0xC8	; 200
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	9d 83       	std	Y+5, r25	; 0x05
    182c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    182e:	8c 81       	ldd	r24, Y+4	; 0x04
    1830:	9d 81       	ldd	r25, Y+5	; 0x05
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	f1 f7       	brne	.-4      	; 0x1832 <GLCD_Data+0x2ea>
    1836:	9d 83       	std	Y+5, r25	; 0x05
    1838:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183a:	8e 81       	ldd	r24, Y+6	; 0x06
    183c:	9f 81       	ldd	r25, Y+7	; 0x07
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	9f 83       	std	Y+7, r25	; 0x07
    1842:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1844:	8e 81       	ldd	r24, Y+6	; 0x06
    1846:	9f 81       	ldd	r25, Y+7	; 0x07
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	69 f7       	brne	.-38     	; 0x1826 <GLCD_Data+0x2de>
    184c:	24 c0       	rjmp	.+72     	; 0x1896 <GLCD_Data+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184e:	68 85       	ldd	r22, Y+8	; 0x08
    1850:	79 85       	ldd	r23, Y+9	; 0x09
    1852:	8a 85       	ldd	r24, Y+10	; 0x0a
    1854:	9b 85       	ldd	r25, Y+11	; 0x0b
    1856:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	9f 83       	std	Y+7, r25	; 0x07
    1860:	8e 83       	std	Y+6, r24	; 0x06
    1862:	8e 81       	ldd	r24, Y+6	; 0x06
    1864:	9f 81       	ldd	r25, Y+7	; 0x07
    1866:	9b 83       	std	Y+3, r25	; 0x03
    1868:	8a 83       	std	Y+2, r24	; 0x02
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	9b 81       	ldd	r25, Y+3	; 0x03
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <GLCD_Data+0x326>
    1872:	9b 83       	std	Y+3, r25	; 0x03
    1874:	8a 83       	std	Y+2, r24	; 0x02
    1876:	0f c0       	rjmp	.+30     	; 0x1896 <GLCD_Data+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1878:	69 89       	ldd	r22, Y+17	; 0x11
    187a:	7a 89       	ldd	r23, Y+18	; 0x12
    187c:	8b 89       	ldd	r24, Y+19	; 0x13
    187e:	9c 89       	ldd	r25, Y+20	; 0x14
    1880:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	88 8b       	std	Y+16, r24	; 0x10
    188a:	88 89       	ldd	r24, Y+16	; 0x10
    188c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	8a 95       	dec	r24
    1892:	f1 f7       	brne	.-4      	; 0x1890 <GLCD_Data+0x348>
    1894:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    1896:	e1 96       	adiw	r28, 0x31	; 49
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <GLCD_Init>:

void GLCD_Init()					/* GLCD initialize function */
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	2e 97       	sbiw	r28, 0x0e	; 14
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
	Data_Port_Dir = 0xFF;
    18bc:	ea e3       	ldi	r30, 0x3A	; 58
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
    18c2:	80 83       	st	Z, r24
	Command_Port_Dir = 0xFF;
    18c4:	e4 e3       	ldi	r30, 0x34	; 52
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	8f ef       	ldi	r24, 0xFF	; 255
    18ca:	80 83       	st	Z, r24
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
    18cc:	a5 e3       	ldi	r26, 0x35	; 53
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e5 e3       	ldi	r30, 0x35	; 53
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	88 63       	ori	r24, 0x38	; 56
    18d8:	8c 93       	st	X, r24
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 ea       	ldi	r26, 0xA0	; 160
    18e0:	b1 e4       	ldi	r27, 0x41	; 65
    18e2:	8b 87       	std	Y+11, r24	; 0x0b
    18e4:	9c 87       	std	Y+12, r25	; 0x0c
    18e6:	ad 87       	std	Y+13, r26	; 0x0d
    18e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	4a ef       	ldi	r20, 0xFA	; 250
    18f8:	54 e4       	ldi	r21, 0x44	; 68
    18fa:	0e 94 17 04 	call	0x82e	; 0x82e <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	8f 83       	std	Y+7, r24	; 0x07
    1904:	98 87       	std	Y+8, r25	; 0x08
    1906:	a9 87       	std	Y+9, r26	; 0x09
    1908:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    190a:	6f 81       	ldd	r22, Y+7	; 0x07
    190c:	78 85       	ldd	r23, Y+8	; 0x08
    190e:	89 85       	ldd	r24, Y+9	; 0x09
    1910:	9a 85       	ldd	r25, Y+10	; 0x0a
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e8       	ldi	r20, 0x80	; 128
    1918:	5f e3       	ldi	r21, 0x3F	; 63
    191a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__ltsf2>
    191e:	88 23       	and	r24, r24
    1920:	2c f4       	brge	.+10     	; 0x192c <GLCD_Init+0x84>
		__ticks = 1;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	9e 83       	std	Y+6, r25	; 0x06
    1928:	8d 83       	std	Y+5, r24	; 0x05
    192a:	3f c0       	rjmp	.+126    	; 0x19aa <GLCD_Init+0x102>
	else if (__tmp > 65535)
    192c:	6f 81       	ldd	r22, Y+7	; 0x07
    192e:	78 85       	ldd	r23, Y+8	; 0x08
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	9a 85       	ldd	r25, Y+10	; 0x0a
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	3f ef       	ldi	r19, 0xFF	; 255
    1938:	4f e7       	ldi	r20, 0x7F	; 127
    193a:	57 e4       	ldi	r21, 0x47	; 71
    193c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__gtsf2>
    1940:	18 16       	cp	r1, r24
    1942:	4c f5       	brge	.+82     	; 0x1996 <GLCD_Init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1944:	6b 85       	ldd	r22, Y+11	; 0x0b
    1946:	7c 85       	ldd	r23, Y+12	; 0x0c
    1948:	8d 85       	ldd	r24, Y+13	; 0x0d
    194a:	9e 85       	ldd	r25, Y+14	; 0x0e
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e2       	ldi	r20, 0x20	; 32
    1952:	51 e4       	ldi	r21, 0x41	; 65
    1954:	0e 94 17 04 	call	0x82e	; 0x82e <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	bc 01       	movw	r22, r24
    195e:	cd 01       	movw	r24, r26
    1960:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	9e 83       	std	Y+6, r25	; 0x06
    196a:	8d 83       	std	Y+5, r24	; 0x05
    196c:	0f c0       	rjmp	.+30     	; 0x198c <GLCD_Init+0xe4>
    196e:	88 ec       	ldi	r24, 0xC8	; 200
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9c 83       	std	Y+4, r25	; 0x04
    1974:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <GLCD_Init+0xd2>
    197e:	9c 83       	std	Y+4, r25	; 0x04
    1980:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1982:	8d 81       	ldd	r24, Y+5	; 0x05
    1984:	9e 81       	ldd	r25, Y+6	; 0x06
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	9e 83       	std	Y+6, r25	; 0x06
    198a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198c:	8d 81       	ldd	r24, Y+5	; 0x05
    198e:	9e 81       	ldd	r25, Y+6	; 0x06
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	69 f7       	brne	.-38     	; 0x196e <GLCD_Init+0xc6>
    1994:	14 c0       	rjmp	.+40     	; 0x19be <GLCD_Init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1996:	6f 81       	ldd	r22, Y+7	; 0x07
    1998:	78 85       	ldd	r23, Y+8	; 0x08
    199a:	89 85       	ldd	r24, Y+9	; 0x09
    199c:	9a 85       	ldd	r25, Y+10	; 0x0a
    199e:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	9e 83       	std	Y+6, r25	; 0x06
    19a8:	8d 83       	std	Y+5, r24	; 0x05
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	9e 81       	ldd	r25, Y+6	; 0x06
    19ae:	9a 83       	std	Y+2, r25	; 0x02
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <GLCD_Init+0x10e>
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	GLCD_Command(0x3E);				/* Display OFF */
    19be:	8e e3       	ldi	r24, 0x3E	; 62
    19c0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GLCD_Command>
	GLCD_Command(0x40);				/* Set Y address (column=0) */
    19c4:	80 e4       	ldi	r24, 0x40	; 64
    19c6:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GLCD_Command>
	GLCD_Command(0xB8);				/* Set x address (page=0) */
    19ca:	88 eb       	ldi	r24, 0xB8	; 184
    19cc:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GLCD_Command>
	GLCD_Command(0xC0);				/* Set z address (start line=0) */
    19d0:	80 ec       	ldi	r24, 0xC0	; 192
    19d2:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GLCD_Command>
	GLCD_Command(0x3F);				/* Display ON */
    19d6:	8f e3       	ldi	r24, 0x3F	; 63
    19d8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GLCD_Command>
}
    19dc:	2e 96       	adiw	r28, 0x0e	; 14
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <GLCD_ClearAll>:

void GLCD_ClearAll()				/* GLCD all display clear function */
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <GLCD_ClearAll+0x6>
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <GLCD_ClearAll+0x8>
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
    19fa:	a5 e3       	ldi	r26, 0x35	; 53
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e5 e3       	ldi	r30, 0x35	; 53
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	88 61       	ori	r24, 0x18	; 24
    1a06:	8c 93       	st	X, r24
	for(i = 0; i < TotalPage; i++)
    1a08:	1c 82       	std	Y+4, r1	; 0x04
    1a0a:	1b 82       	std	Y+3, r1	; 0x03
    1a0c:	19 c0       	rjmp	.+50     	; 0x1a40 <GLCD_ClearAll+0x52>
	{
		GLCD_Command((0xB8) + i);	/* Increment page each time after 64 column */
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	88 54       	subi	r24, 0x48	; 72
    1a12:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GLCD_Command>
		for(j = 0; j < 64; j++)
    1a16:	1a 82       	std	Y+2, r1	; 0x02
    1a18:	19 82       	std	Y+1, r1	; 0x01
    1a1a:	08 c0       	rjmp	.+16     	; 0x1a2c <GLCD_ClearAll+0x3e>
		{
			GLCD_Data(0);			/* Write zeros to all 64 column */
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	0e 94 a4 0a 	call	0x1548	; 0x1548 <GLCD_Data>
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);	/* Increment page each time after 64 column */
		for(j = 0; j < 64; j++)
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	9a 83       	std	Y+2, r25	; 0x02
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a30:	80 34       	cpi	r24, 0x40	; 64
    1a32:	91 05       	cpc	r25, r1
    1a34:	9c f3       	brlt	.-26     	; 0x1a1c <GLCD_ClearAll+0x2e>
void GLCD_ClearAll()				/* GLCD all display clear function */
{
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	9c 83       	std	Y+4, r25	; 0x04
    1a3e:	8b 83       	std	Y+3, r24	; 0x03
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	88 30       	cpi	r24, 0x08	; 8
    1a46:	91 05       	cpc	r25, r1
    1a48:	14 f3       	brlt	.-60     	; 0x1a0e <GLCD_ClearAll+0x20>
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);			/* Write zeros to all 64 column */
		}
	}
	GLCD_Command(0x40);				/* Set Y address (column=0) */
    1a4a:	80 e4       	ldi	r24, 0x40	; 64
    1a4c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GLCD_Command>
	GLCD_Command(0xB8);				/* Set x address (page=0) */
    1a50:	88 eb       	ldi	r24, 0xB8	; 184
    1a52:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GLCD_Command>
}
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <GLCD_String>:

void GLCD_String(const char* image)	/* GLCD string write function */
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	62 97       	sbiw	r28, 0x12	; 18
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	9a 8b       	std	Y+18, r25	; 0x12
    1a7a:	89 8b       	std	Y+17, r24	; 0x11
	int column,page,page_add=0xB8,k=0;
    1a7c:	88 eb       	ldi	r24, 0xB8	; 184
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	9c 87       	std	Y+12, r25	; 0x0c
    1a82:	8b 87       	std	Y+11, r24	; 0x0b
    1a84:	1a 86       	std	Y+10, r1	; 0x0a
    1a86:	19 86       	std	Y+9, r1	; 0x09
	float page_inc=0.5;
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a0 e0       	ldi	r26, 0x00	; 0
    1a8e:	bf e3       	ldi	r27, 0x3F	; 63
    1a90:	8d 83       	std	Y+5, r24	; 0x05
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	af 83       	std	Y+7, r26	; 0x07
    1a96:	b8 87       	std	Y+8, r27	; 0x08
	char byte;

	Command_Port |= (1 << CS1);		/* Select first Left half of display */
    1a98:	a5 e3       	ldi	r26, 0x35	; 53
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e5 e3       	ldi	r30, 0x35	; 53
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	88 60       	ori	r24, 0x08	; 8
    1aa4:	8c 93       	st	X, r24
	Command_Port &= ~(1 << CS2);
    1aa6:	a5 e3       	ldi	r26, 0x35	; 53
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e5 e3       	ldi	r30, 0x35	; 53
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	8f 7e       	andi	r24, 0xEF	; 239
    1ab2:	8c 93       	st	X, r24

	for(page=0;page<16;page++)		/* Print 16 pages i.e. 8 page of each half of display */
    1ab4:	1e 86       	std	Y+14, r1	; 0x0e
    1ab6:	1d 86       	std	Y+13, r1	; 0x0d
    1ab8:	6c c0       	rjmp	.+216    	; 0x1b92 <GLCD_String+0x12e>
	{
		for(column=0;column<64;column++)
    1aba:	18 8a       	std	Y+16, r1	; 0x10
    1abc:	1f 86       	std	Y+15, r1	; 0x0f
    1abe:	1b c0       	rjmp	.+54     	; 0x1af6 <GLCD_String+0x92>
		{
			byte = pgm_read_byte(&image[k+column]);
    1ac0:	29 85       	ldd	r18, Y+9	; 0x09
    1ac2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ac4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac6:	98 89       	ldd	r25, Y+16	; 0x10
    1ac8:	82 0f       	add	r24, r18
    1aca:	93 1f       	adc	r25, r19
    1acc:	9c 01       	movw	r18, r24
    1ace:	89 89       	ldd	r24, Y+17	; 0x11
    1ad0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ad2:	82 0f       	add	r24, r18
    1ad4:	93 1f       	adc	r25, r19
    1ad6:	9b 83       	std	Y+3, r25	; 0x03
    1ad8:	8a 83       	std	Y+2, r24	; 0x02
    1ada:	ea 81       	ldd	r30, Y+2	; 0x02
    1adc:	fb 81       	ldd	r31, Y+3	; 0x03
    1ade:	84 91       	lpm	r24, Z+
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	8c 83       	std	Y+4, r24	; 0x04
			GLCD_Data(byte);		/* Print 64 column of each page */
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	0e 94 a4 0a 	call	0x1548	; 0x1548 <GLCD_Data>
	Command_Port |= (1 << CS1);		/* Select first Left half of display */
	Command_Port &= ~(1 << CS2);

	for(page=0;page<16;page++)		/* Print 16 pages i.e. 8 page of each half of display */
	{
		for(column=0;column<64;column++)
    1aec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aee:	98 89       	ldd	r25, Y+16	; 0x10
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	98 8b       	std	Y+16, r25	; 0x10
    1af4:	8f 87       	std	Y+15, r24	; 0x0f
    1af6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af8:	98 89       	ldd	r25, Y+16	; 0x10
    1afa:	80 34       	cpi	r24, 0x40	; 64
    1afc:	91 05       	cpc	r25, r1
    1afe:	04 f3       	brlt	.-64     	; 0x1ac0 <GLCD_String+0x5c>
		{
			byte = pgm_read_byte(&image[k+column]);
			GLCD_Data(byte);		/* Print 64 column of each page */
		}
		Command_Port ^= (1 << CS1);	/* If yes then change segment controller */
    1b00:	a5 e3       	ldi	r26, 0x35	; 53
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e5 e3       	ldi	r30, 0x35	; 53
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	90 81       	ld	r25, Z
    1b0a:	88 e0       	ldi	r24, 0x08	; 8
    1b0c:	89 27       	eor	r24, r25
    1b0e:	8c 93       	st	X, r24
		Command_Port ^= (1 << CS2);
    1b10:	a5 e3       	ldi	r26, 0x35	; 53
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e5 e3       	ldi	r30, 0x35	; 53
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	90 81       	ld	r25, Z
    1b1a:	80 e1       	ldi	r24, 0x10	; 16
    1b1c:	89 27       	eor	r24, r25
    1b1e:	8c 93       	st	X, r24
		GLCD_Command((page_add+page_inc));/* Increment page address */
    1b20:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b22:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b24:	aa 27       	eor	r26, r26
    1b26:	97 fd       	sbrc	r25, 7
    1b28:	a0 95       	com	r26
    1b2a:	ba 2f       	mov	r27, r26
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__floatsisf>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	bc 01       	movw	r22, r24
    1b3a:	cd 01       	movw	r24, r26
    1b3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b3e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b40:	4f 81       	ldd	r20, Y+7	; 0x07
    1b42:	58 85       	ldd	r21, Y+8	; 0x08
    1b44:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__addsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GLCD_Command>
		page_inc=page_inc+0.5;
    1b5c:	6d 81       	ldd	r22, Y+5	; 0x05
    1b5e:	7e 81       	ldd	r23, Y+6	; 0x06
    1b60:	8f 81       	ldd	r24, Y+7	; 0x07
    1b62:	98 85       	ldd	r25, Y+8	; 0x08
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__addsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	9e 83       	std	Y+6, r25	; 0x06
    1b78:	af 83       	std	Y+7, r26	; 0x07
    1b7a:	b8 87       	std	Y+8, r27	; 0x08
		k=k+64;						/* Increment pointer */
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	80 5c       	subi	r24, 0xC0	; 192
    1b82:	9f 4f       	sbci	r25, 0xFF	; 255
    1b84:	9a 87       	std	Y+10, r25	; 0x0a
    1b86:	89 87       	std	Y+9, r24	; 0x09
	char byte;

	Command_Port |= (1 << CS1);		/* Select first Left half of display */
	Command_Port &= ~(1 << CS2);

	for(page=0;page<16;page++)		/* Print 16 pages i.e. 8 page of each half of display */
    1b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	9e 87       	std	Y+14, r25	; 0x0e
    1b90:	8d 87       	std	Y+13, r24	; 0x0d
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	80 31       	cpi	r24, 0x10	; 16
    1b98:	91 05       	cpc	r25, r1
    1b9a:	0c f4       	brge	.+2      	; 0x1b9e <GLCD_String+0x13a>
    1b9c:	8e cf       	rjmp	.-228    	; 0x1aba <GLCD_String+0x56>
		Command_Port ^= (1 << CS2);
		GLCD_Command((page_add+page_inc));/* Increment page address */
		page_inc=page_inc+0.5;
		k=k+64;						/* Increment pointer */
	}
	GLCD_Command(0x40);				/* Set Y address (column=0) */
    1b9e:	80 e4       	ldi	r24, 0x40	; 64
    1ba0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GLCD_Command>
	GLCD_Command(0xB8);				/* Set x address (page=0) */
    1ba4:	88 eb       	ldi	r24, 0xB8	; 184
    1ba6:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GLCD_Command>
}
    1baa:	62 96       	adiw	r28, 0x12	; 18
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <main>:

int main(void)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
	GLCD_Init();					/* Initialize GLCD */
    1bc4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <GLCD_Init>
	GLCD_ClearAll();				/* Clear all GLCD display */
    1bc8:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <GLCD_ClearAll>
	GLCD_String(img);
    1bcc:	84 e5       	ldi	r24, 0x54	; 84
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <GLCD_String>
    1bd4:	ff cf       	rjmp	.-2      	; 0x1bd4 <main+0x18>

00001bd6 <__prologue_saves__>:
    1bd6:	2f 92       	push	r2
    1bd8:	3f 92       	push	r3
    1bda:	4f 92       	push	r4
    1bdc:	5f 92       	push	r5
    1bde:	6f 92       	push	r6
    1be0:	7f 92       	push	r7
    1be2:	8f 92       	push	r8
    1be4:	9f 92       	push	r9
    1be6:	af 92       	push	r10
    1be8:	bf 92       	push	r11
    1bea:	cf 92       	push	r12
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	ca 1b       	sub	r28, r26
    1c00:	db 0b       	sbc	r29, r27
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	09 94       	ijmp

00001c0e <__epilogue_restores__>:
    1c0e:	2a 88       	ldd	r2, Y+18	; 0x12
    1c10:	39 88       	ldd	r3, Y+17	; 0x11
    1c12:	48 88       	ldd	r4, Y+16	; 0x10
    1c14:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c16:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c18:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c20:	b9 84       	ldd	r11, Y+9	; 0x09
    1c22:	c8 84       	ldd	r12, Y+8	; 0x08
    1c24:	df 80       	ldd	r13, Y+7	; 0x07
    1c26:	ee 80       	ldd	r14, Y+6	; 0x06
    1c28:	fd 80       	ldd	r15, Y+5	; 0x05
    1c2a:	0c 81       	ldd	r16, Y+4	; 0x04
    1c2c:	1b 81       	ldd	r17, Y+3	; 0x03
    1c2e:	aa 81       	ldd	r26, Y+2	; 0x02
    1c30:	b9 81       	ldd	r27, Y+1	; 0x01
    1c32:	ce 0f       	add	r28, r30
    1c34:	d1 1d       	adc	r29, r1
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	ed 01       	movw	r28, r26
    1c42:	08 95       	ret

00001c44 <_exit>:
    1c44:	f8 94       	cli

00001c46 <__stop_program>:
    1c46:	ff cf       	rjmp	.-2      	; 0x1c46 <__stop_program>
