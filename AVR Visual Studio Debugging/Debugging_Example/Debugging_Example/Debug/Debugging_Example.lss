
Debugging_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000871  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  00000891  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000091  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000005d  00000000  00000000  0000093d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000129  00000000  00000000  0000099a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ea  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000bce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 

#include <avr/io.h>

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	unsigned char counter;
	DDRB = 0xFF; //8 leds at PORTB 
  76:	87 e3       	ldi	r24, 0x37	; 55
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	2f ef       	ldi	r18, 0xFF	; 255
  7c:	fc 01       	movw	r30, r24
  7e:	20 83       	st	Z, r18
	DDRA = DDRA & (~(1<<PA0)); //switch at PA0
  80:	8a e3       	ldi	r24, 0x3A	; 58
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	2a e3       	ldi	r18, 0x3A	; 58
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	f9 01       	movw	r30, r18
  8a:	20 81       	ld	r18, Z
  8c:	2e 7f       	andi	r18, 0xFE	; 254
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
	counter=0;
  92:	19 82       	std	Y+1, r1	; 0x01
  94:	01 c0       	rjmp	.+2      	; 0x98 <main+0x2c>
		if(PINA & (1<<PA0))
		{
			counter=0;
			PORTB=0;
		}			 
    }
  96:	00 00       	nop
	DDRB = 0xFF; //8 leds at PORTB 
	DDRA = DDRA & (~(1<<PA0)); //switch at PA0
	counter=0;
    while(1)
    {
        counter++;
  98:	89 81       	ldd	r24, Y+1	; 0x01
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	89 83       	std	Y+1, r24	; 0x01
		PORTB=counter;
  9e:	88 e3       	ldi	r24, 0x38	; 56
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	29 81       	ldd	r18, Y+1	; 0x01
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
		if(PINA & (1<<PA0))
  a8:	89 e3       	ldi	r24, 0x39	; 57
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	fc 01       	movw	r30, r24
  ae:	80 81       	ld	r24, Z
  b0:	88 2f       	mov	r24, r24
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	81 70       	andi	r24, 0x01	; 1
  b6:	90 70       	andi	r25, 0x00	; 0
  b8:	88 23       	and	r24, r24
  ba:	69 f3       	breq	.-38     	; 0x96 <main+0x2a>
		{
			counter=0;
  bc:	19 82       	std	Y+1, r1	; 0x01
			PORTB=0;
  be:	88 e3       	ldi	r24, 0x38	; 56
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	10 82       	st	Z, r1
		}			 
    }
  c6:	e8 cf       	rjmp	.-48     	; 0x98 <main+0x2c>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
